package io.sarl.api.protocol

import io.bootique.di.Injector
import io.sarl.api.core.OpenEventSpace
import io.sarl.lang.core.SpaceID
import io.sarl.lang.core.SpaceSpecification
import io.sarl.sre.janus.KernelScope
import io.sarl.sre.janus.services.logging.LoggingService
import io.sarl.sre.janus.spaces.SpaceParticipantListenerFactory
import javax.inject.Inject
import javax.inject.Named

abstract class AbstractProtocolSpaceSpecification implements SpaceSpecification<ProtocolSpace> {

	@Inject
	protected var injector : Injector
	
	@Inject
	protected var loggingService : LoggingService
	
	@Inject
	@KernelScope
	protected var spaceParticipantListenerFactory : SpaceParticipantListenerFactory
	
	@Inject
	@Named("defaultSpace")
	protected var defaultSpace : OpenEventSpace
	
	def create(id : SpaceID, params : Object*) : ProtocolSpace {
		val logger = this.loggingService.getKernelLogger
		val listener = this.spaceParticipantListenerFactory.create(this.defaultSpace, logger)
		val ^space = new ProtocolSpace(id, listener, this.loggingService, getRoles)
		listener.defaultSpace = ^space
		this.injector.injectMembers(^space)
		return ^space
	}
	
	abstract def getRoles : ProtocolRole[] 

}
