package io.sarl.api.protocol.examples.cnp._generated.participant

import io.sarl.api.core.Logging
import io.sarl.api.protocol.examples.cnp._generated.events.Failure
import io.sarl.api.protocol.examples.cnp._generated.events.Inform
import io.sarl.api.protocol.examples.cnp._generated.events.Propose
import io.sarl.api.protocol.examples.cnp._generated.events.Refuse
import io.sarl.lang.core.EventSpace
import io.sarl.lang.core.util.MutableOptional
import java.util.UUID

skill ParticipantProtocolSkill implements ParticipantProtocolCapacity {

	uses Logging

	val protocolSpace : EventSpace

	val bid : MutableOptional<Integer> = MutableOptional.empty
	val reason : MutableOptional<String> = MutableOptional.empty
	
	new (protocolSpace : EventSpace) {
		this.protocolSpace = protocolSpace
	}
	
	def setBid(bid : int) {
		this.bid.set(bid)
		emitProposeIfReady
	}
	
	def setReason(reason : String) {
		this.reason.set(reason)
		emitRefuseIfReady
	}
	
	private def emitProposeIfReady {
		if (this.bid.isPresent) {
			var evt = new Propose(this.bid.get)
			this.protocolSpace.emit(owner.ID, evt)
		}
	}

	private def emitRefuseIfReady {
		if (this.reason.isPresent) {
			var evt = new Refuse(this.reason.get)
			this.protocolSpace.emit(owner.ID, evt)
		}
	}

	def emitInformTo(id : UUID) {
		info("Emit INFORM")
		this.protocolSpace.emit(owner.ID, new Inform)[it.ID == id]
	}

	def emitFailureTo(id : UUID, reason : String) {
		info("Emit Failure")
		this.protocolSpace.emit(owner.ID, new Failure(reason))[it.ID == id]
	}
	
}
