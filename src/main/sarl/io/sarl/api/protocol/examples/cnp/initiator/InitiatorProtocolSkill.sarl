package io.sarl.api.protocol.examples.cnp.initiator

import io.sarl.api.core.Logging
import io.sarl.api.protocol.examples.cnp.events.Accept
import io.sarl.api.protocol.examples.cnp.events.CFP
import io.sarl.api.protocol.examples.cnp.events.Reject
import io.sarl.lang.core.EventSpace
import io.sarl.lang.core.util.MutableOptional
import java.util.UUID

skill InitiatorProtocolSkill implements InitiatorProtocolCapacity {
	
	uses Logging

	val protocolSpace : EventSpace

	val task : MutableOptional<String> = MutableOptional.empty
	val reason : MutableOptional<String> = MutableOptional.empty
	
	new (protocolSpace : EventSpace) {
		this.protocolSpace = protocolSpace
	}
	
	def setTask(task : String) {
		this.task.set(task)
		emitIfReadyCFP
	}
	
	def emitAcceptTo(id : UUID) {
		info("Emit ACCEPT")
		this.protocolSpace.emit(owner.ID, new Accept)[it.ID == id]
	}

	def emitRejectTo(id : UUID, reason: String) {
		info("Emit REJECT")
		this.protocolSpace.emit(owner.ID, new Reject(reason))[it.ID == id]
	}
	
	private def emitIfReadyCFP {
		if (this.task.isPresent) {
			var evt = new CFP(this.task.get)
			info("Emit CFP")
			this.protocolSpace.emit(owner.ID, evt)
			//TODO guard for emit only to specific role players
		}
	}
	
	def setReason(reason : String) {
		this.reason.set(reason)
		emitIfReadyReject
	}

	private def emitIfReadyReject {
		if (this.reason.isPresent) {
			var evt = new Reject(this.reason.get)
			info("Emit REJECT")
			this.protocolSpace.emit(owner.ID, evt)
			// TODO guard for emit only to specific role players
		}
	}
	
}
