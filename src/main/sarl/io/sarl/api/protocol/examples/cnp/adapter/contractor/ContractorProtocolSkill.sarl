package io.sarl.api.protocol.examples.cnp.adapter.contractor

import io.sarl.api.core.ExternalContextAccess
import io.sarl.api.localstate.KnowledgeID
import io.sarl.api.localstate.LocalStateManager
import io.sarl.api.protocol.ProtocolMessage
import io.sarl.api.protocol.ProtocolSkill
import io.sarl.api.protocol.ProtocolSpace
import io.sarl.api.protocol.examples.cnp.adapter.events.Accept
import io.sarl.api.protocol.examples.cnp.adapter.events.CFP
import io.sarl.api.protocol.examples.cnp.adapter.events.Reject
import java.util.List
import java.util.UUID

skill ContractorProtocolSkill implements ContractorProtocolCapacity extends ProtocolSkill {
	
	uses LocalStateManager, ExternalContextAccess

	new (protocolSpace : ProtocolSpace) {
		super(protocolSpace)
	}
	
	def getEnabledCFPMessages : List<ProtocolMessage<CFP>> {
		var enabledMessages = <ProtocolMessage<CFP>>newArrayList
		var scopes = getScopesFromName("participant")
		for (scope : scopes) {
			var ^space = scope.findSpaceMachtingScope
			if (^space !== null) {
				synchronized(localStateManagerLock) {
					// isDefined(new KnowledgeID("p2", scope.keys)
					if (!isBound(new KnowledgeID("task", scope.keys))) {
						enabledMessages.add(
							new ProtocolMessage<CFP>(
								^space,
								new CFP(
									scope.keys.get(0) as String,
									scope.keys.get(1) as String
									//getKnowledge(new KnowledgeID("task", scope.keys), typeof(String))
								),
								getKnowledge(new KnowledgeID("participant", scope.keys), typeof(UUID))
							)
						)
					}
				}
			}
		}
		return enabledMessages

//		var res = <ProtocolMessage<CFP>> newArrayList
//		for (^space : protocolSpaces.toList) {
//			if(^space.getRolePlayers(CNPRole.PARTICIPANT).allMatch [ it0 |
//				!isBound(new KnowledgeID("task", ^space.spaceID as String, it0 as String))
//			]) {
//				for (participant : ^space.getRolePlayers(CNPRole.PARTICIPANT).toList) {
//					res.add(new ProtocolMessage<CFP>(^space, new CFP, participant))
//				}
//			}
//		}
//		return res.stream

	}
	
	def getEnabledAcceptMessages : List<ProtocolMessage<Accept>> {
		var enabledMessages = <ProtocolMessage<Accept>>newArrayList
		var scopes = getScopesFromName("offer")
		for (scope : scopes) {
			var ^space = scope.findSpaceMachtingScope
			if (^space !== null) {
				synchronized (localStateManagerLock) {
					// isDefined(new KnowledgeID("p2", scope.keys)
					if (!isBound(new KnowledgeID("accept", scope.keys)) &&
						!isBound(new KnowledgeID("x", scope.keys))) {
						enabledMessages.add(
							new ProtocolMessage<Accept>(
								^space,
								new Accept(
									scope.keys.get(0) as String,
									scope.keys.get(1) as String,
									getKnowledge(new KnowledgeID("offer", scope.keys), typeof(int))
								),
								getKnowledge(new KnowledgeID("participant", scope.keys), typeof(UUID))
							)
						)
					}
				}
			}
		}
		return enabledMessages
	}
	
	def getEnabledRejectMessages : List<ProtocolMessage<Reject>> {
		var enabledMessages = <ProtocolMessage<Reject>>newArrayList
		var scopes = getScopesFromName("offer")
		for (scope : scopes) {
			var ^space = scope.findSpaceMachtingScope
			if (^space !== null) {
				synchronized (localStateManagerLock) {
					// isDefined(new KnowledgeID("p2", scope.keys)
					if (!isBound(new KnowledgeID("accept", scope.keys)) && !isBound(new KnowledgeID("x", scope.keys))) {
						enabledMessages.add(
							new ProtocolMessage<Reject>(
								^space,
								new Reject(
									scope.keys.get(0) as String,
									scope.keys.get(1) as String,
									getKnowledge(new KnowledgeID("offer", scope.keys), typeof(int))
								),
								getKnowledge(new KnowledgeID("participant", scope.keys), typeof(UUID))
							)
						)
					}
				}
			}
		}
		return enabledMessages
	}

	def sendCFPMessage(m : ProtocolMessage<CFP>) {
		val taskId = new KnowledgeID("task", m.evt.iDt, m.evt.iDp)
		var task : String
		synchronized(localStateManagerLock) {
			task = getKnowledge(taskId, typeof(String))
			bind(taskId)
		}
		m.evt.task = task
		emit(m.^space, m.evt)[it.ID == m.receiver]
	}
	
	def sendAcceptMessage(m : ProtocolMessage<Accept>) {
		var idX = new KnowledgeID("x", m.evt.iDt, m.evt.iDp)
		var idAccept = new KnowledgeID("accept", m.evt.iDt, m.evt.iDp)
		var x : String
		var accept : String
		synchronized (localStateManagerLock) {
			x = getKnowledge(idX, typeof(String))
			accept = getKnowledge(idAccept, typeof(String))
			bind(idX)
			bind(idAccept)
		}
		m.evt.x = x
		m.evt.accept = accept
		emit(m.^space, m.evt)[it.ID == m.receiver]
	}
	
	def sendRejectMessage(m : ProtocolMessage<Reject>) {
		var idX = new KnowledgeID("x", m.evt.iDt, m.evt.iDp)
		var idOutcome = new KnowledgeID("outcome", m.evt.iDt, m.evt.iDp)
		var x : String
		var outcome : String
		synchronized (localStateManagerLock) {
			x = getKnowledge(idX, typeof(String))
			outcome = getKnowledge(idOutcome, typeof(String))
			bind(idX)
			bind(idOutcome)
		}
		m.evt.x = x
		m.evt.outcome = outcome
		emit(m.^space, m.evt)[it.ID == m.receiver]
	}
	
}
