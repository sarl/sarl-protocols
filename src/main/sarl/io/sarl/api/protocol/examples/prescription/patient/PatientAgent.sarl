package io.sarl.api.protocol.examples.prescription.patient

import io.sarl.api.core.Initialize
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Logging
import io.sarl.api.protocol.ProtocolCompleted
import io.sarl.api.protocol.ProtocolEnactment
import io.sarl.api.protocol.ProtocolEnactmentSkill
import io.sarl.api.protocol.ProtocolSpace
import io.sarl.api.protocol.examples.prescription.adapter.PrescriptionRole
import io.sarl.api.protocol.examples.prescription.adapter.events.ComplainEnabled
import io.sarl.api.protocol.examples.prescription.adapter.events.PkgBound
import io.sarl.api.protocol.examples.prescription.adapter.patient.PatientProtocolCapacity
import io.sarl.api.protocol.examples.prescription.adapter.^space.PrescriptionSpaceSpecification
import java.util.concurrent.atomic.AtomicReference

agent PatientAgent {
	
	uses ProtocolEnactment, PatientProtocolCapacity, Logging, Lifecycle
	
	var prescriptionSpace = new AtomicReference<ProtocolSpace>
	
	on Initialize {
		loggingName = "Patient"
		setSkill(new ProtocolEnactmentSkill)
		var sp = enact(PrescriptionSpaceSpecification, PrescriptionRole.PATIENT)
		prescriptionSpace.set(sp)
	}

	on ComplainEnabled {
		setSymptoms("fever")
	}
	
	on PkgBound {
		info("Thank you!")
	}
	
	on ProtocolCompleted {
		leave(prescriptionSpace.get, PrescriptionRole.PATIENT)
		killMe
	}
	
}