package io.sarl.api.protocol.examples.netbill.adapter.merchant

import io.sarl.api.core.ExternalContextAccess
import io.sarl.api.localstate.KnowledgeID
import io.sarl.api.localstate.LocalStateManager
import io.sarl.api.protocol.ProtocolMessage
import io.sarl.api.protocol.ProtocolSkill
import io.sarl.api.protocol.examples.netbill.adapter.events.Goods
import io.sarl.api.protocol.examples.netbill.adapter.events.Quote
import io.sarl.api.protocol.examples.netbill.adapter.events.Receipt
import java.util.List
import java.util.UUID

skill MerchantProtocolSkill implements MerchantProtocolCapacity extends ProtocolSkill {
	
	uses LocalStateManager, ExternalContextAccess
	
	def getEnabledQuoteMessages : List<ProtocolMessage<Quote>> {
		var enabledMessages = <ProtocolMessage<Quote>>newArrayList
		var scopes = getScopesFromName("item")
		for (scope : scopes) {
			var ^space = scope.findSpaceMachtingScope
			if (^space !== null) {
				synchronized (localStateManagerLock) {
					if(!isBound(new KnowledgeID("price", scope.keys))) {
						enabledMessages.add(
							new ProtocolMessage<Quote>(
								^space,
								new Quote(
									scope.keys.get(0) as String,
									getKnowledge(new KnowledgeID("item", scope.keys), typeof(String))
								),
								getKnowledge(new KnowledgeID("customer", scope.keys), typeof(UUID))
							)
						)
					}
				}
			}
		}
		return enabledMessages
		// protocolSpaces.map [
//			var m = new Msg
//			m.spc = it
//			m.inParametersId = #[
//				new KnowledgeID("item", it.spaceID as String)
//			]
//			m.outParametersId = #[
//				new KnowledgeID("price", it.spaceID as String)
//			]
//			return m
//		].filter [
//			it.inParametersId.stream.allMatch[it0|
//				isDefined(it0)
//			] && it.outParametersId.stream.allMatch [ it0 |
//				!isBound(it0)
//			]
//		].map [
//			var id = it.spc.spaceID
//			var item = getKnowledge(it.inParametersId.get(0), typeof(String))
//			new ProtocolMessage<Quote>(
//				it.spc,
//				new Quote(item)
//			)
//		]
	}

	def getEnabledGoodsMessages : List<ProtocolMessage<Goods>> {
		var enabledMessages = <ProtocolMessage<Goods>>newArrayList
		var scopes = getScopesFromName("item")
		for (scope : scopes) {
			var ^space = scope.findSpaceMachtingScope
			if (^space !== null) {
				synchronized (localStateManagerLock) {
					if (isDefined(new KnowledgeID("outcome", scope.keys)) && 
						!isBound(new KnowledgeID("shipped", scope.keys))
					) {
						enabledMessages.add(
							new ProtocolMessage<Goods>(
								^space,
								new Goods(
									scope.keys.get(0) as String,
									getKnowledge(new KnowledgeID("item", scope.keys), typeof(String)),
									getKnowledge(new KnowledgeID("outcome", scope.keys), typeof(String))
								),
								getKnowledge(new KnowledgeID("customer", scope.keys), typeof(UUID))
							)
						)
					}
				}
			}
		}
		return enabledMessages
	}

	def getEnabledReceiptMessages : List<ProtocolMessage<Receipt>> {
		var enabledMessages = <ProtocolMessage<Receipt>>newArrayList
		var scopes = getScopesFromName("price")
		for (scope : scopes) {
			var ^space = scope.findSpaceMachtingScope
			if (^space !== null) {
				synchronized (localStateManagerLock) {
					if (isDefined(new KnowledgeID("cc", scope.keys)) &&
						!isBound(new KnowledgeID("done", scope.keys))) {
						enabledMessages.add(
							new ProtocolMessage<Receipt>(
								^space,
								new Receipt(
									scope.keys.get(0) as String,
									getKnowledge(new KnowledgeID("price", scope.keys), typeof(int)),
									getKnowledge(new KnowledgeID("cc", scope.keys), typeof(String))
								),
								getKnowledge(new KnowledgeID("customer", scope.keys), typeof(UUID))
							)
						)
					}
				}
			}
		}
		return enabledMessages
	}

	def sendQuoteMessage(m : ProtocolMessage<Quote>) {
		var idPrice = new KnowledgeID("price", m.evt.id)
		var price : int
		synchronized(localStateManagerLock) {
			price = getKnowledge(idPrice, typeof(int))
			bind(idPrice)
		}
		m.evt.price = price
		emit(m.^space, m.evt)[it.ID == m.receiver]
	}
	
	def sendGoodsMessage(m : ProtocolMessage<Goods>) {
		var idShipped = new KnowledgeID("shipped", m.evt.id)
		var shipped : String
		synchronized (localStateManagerLock) {
			shipped = getKnowledge(idShipped, typeof(String))
			bind(idShipped)
		}
		m.evt.shipped = shipped
		emit(m.^space, m.evt)[it.ID == m.receiver]
	}
	
	def sendReceiptMessage(m : ProtocolMessage<Receipt>) {
		var idChit = new KnowledgeID("chit", m.evt.id)
		var idDone = new KnowledgeID("done", m.evt.id)
		var chit : String
		var done : String
		synchronized (localStateManagerLock) {
			chit = getKnowledge(idChit, typeof(String))
			done = getKnowledge(idDone, typeof(String))
			bind(idChit)
			bind(idDone)
		}
		m.evt.chit = chit
		m.evt.done = done
		emit(m.^space, m.evt)[it.ID == m.receiver]
	}
	
}
