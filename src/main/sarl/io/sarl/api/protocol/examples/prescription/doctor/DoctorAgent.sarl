package io.sarl.api.protocol.examples.prescription.doctor

import io.sarl.api.core.Initialize
import io.sarl.api.core.Lifecycle
import io.sarl.api.core.Logging
import io.sarl.api.core.SpaceCreated
import io.sarl.api.protocol.ProtocolCompleted
import io.sarl.api.protocol.ProtocolEnactment
import io.sarl.api.protocol.ProtocolEnactmentSkill
import io.sarl.api.protocol.ProtocolSpace
import io.sarl.api.protocol.examples.prescription.adapter.PrescriptionRole
import io.sarl.api.protocol.examples.prescription.adapter.doctor.DoctorProtocolCapacity
import io.sarl.api.protocol.examples.prescription.adapter.events.PrescribeEnabled
import io.sarl.api.protocol.examples.prescription.adapter.^space.PrescriptionSpaceSpecification
import java.util.concurrent.atomic.AtomicReference

agent DoctorAgent {
	
	uses ProtocolEnactment, DoctorProtocolCapacity, DoctorInnerCapacity, Logging, Lifecycle

	var prescriptionSpace = new AtomicReference<ProtocolSpace>
	
	on Initialize {
		loggingName = "Doctor"
	}
	
	on SpaceCreated [it.spaceID.spaceSpecification == PrescriptionSpaceSpecification] {
		setSkill(new ProtocolEnactmentSkill)
		setSkill(new DoctorInnerSkill)
		var sp = enact(occurrence.spaceID, PrescriptionRole.DOCTOR)
		prescriptionSpace.set(sp)
	}
	
	
	on PrescribeEnabled {
		var prescription = computePrescribe(symptoms)
		setRx(prescription)
	}

	on ProtocolCompleted {
		leave(prescriptionSpace.get, PrescriptionRole.DOCTOR)
		killMe
	}
	
}
