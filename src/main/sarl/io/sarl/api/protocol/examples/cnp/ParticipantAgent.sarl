package io.sarl.api.protocol.examples.cnp

import io.sarl.api.core.Initialize
import io.sarl.api.core.Logging
import io.sarl.api.core.SpaceCreated
import io.sarl.api.localstate.KnowledgeID
import io.sarl.api.localstate.LocalStateManager
import io.sarl.api.protocol.ProtocolEnactment
import io.sarl.api.protocol.ProtocolMessage
import io.sarl.api.protocol.ProtocolReady
import io.sarl.api.protocol.examples.cnp.adapter.CNPRole
import io.sarl.api.protocol.examples.cnp.adapter.events.Propose
import io.sarl.api.protocol.examples.cnp.adapter.events.Refuse
import io.sarl.api.protocol.examples.cnp.adapter.participant.ParticipantProtocolCapacity
import io.sarl.api.protocol.examples.cnp.adapter.^space.CNPSpaceSpecification
import java.util.List

agent ParticipantAgent {
	
	uses ProtocolEnactment, Logging, ParticipantProtocolCapacity, LocalStateManager
	
	var participant_number : int
	
	on Initialize {
		participant_number = occurrence.parameters.get(0) as int
		loggingName = "Participant" + participant_number
		info("I am " + ID)
	}
	
	on SpaceCreated [it.spaceID.spaceSpecification == CNPSpaceSpecification] {
		//setSkill(new ProtocolEnactmentSkill)
		enact(occurrence.spaceID, CNPRole.PARTICIPANT)
	}

	on ProtocolReady {
		var enabledProposes : List<ProtocolMessage<Propose>> = enabledProposeMessages
		var enabledRefuses : List<ProtocolMessage<Refuse>> = enabledRefuseMessages
		while (enabledProposes.isEmpty && enabledRefuses.isEmpty) {
			enabledProposes = enabledProposeMessages
			enabledRefuses = enabledRefuseMessages
			//Thread::yield
		}
		if (participant_number % 2 == 0) {
			var proposeMessage = enabledProposes.get(0)
			setKnowledge(new KnowledgeID("pdecision", proposeMessage.evt.iDt, proposeMessage.evt.iDp), typeof(String),
				"propose")
			setKnowledge(new KnowledgeID("offer", proposeMessage.evt.iDt, proposeMessage.evt.iDp), typeof(int),
				300 + participant_number)
			sendProposeMessage(proposeMessage)

		}
		else {
			var refuseMessage = enabledRefuses.get(0)
			setKnowledge(new KnowledgeID("pdecision", refuseMessage.evt.iDt, refuseMessage.evt.iDp), typeof(String),
				"refuse")
			setKnowledge(new KnowledgeID("outcome", refuseMessage.evt.iDt, refuseMessage.evt.iDp), typeof(String),
				"refuse")
			sendRefuseMessage(refuseMessage)
		}
	}
	
}
