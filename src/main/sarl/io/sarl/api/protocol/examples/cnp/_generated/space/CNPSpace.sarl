package io.sarl.api.protocol.examples.cnp._generated.^space

import io.sarl.api.protocol.ProtocolReady
import io.sarl.lang.core.EventListener
import io.sarl.sre.janus.spaces.OpenLocalEventSpace

class CNPSpace extends OpenLocalEventSpace {
	
	var initiator : EventListener
	val participants = <EventListener>newArrayList
	
	var protocolStarted = false
	
	def synchronized registerInitiator(initiator : EventListener) {
		if(this.initiator !== null) {
			throw new RuntimeException
		}
		this.initiator = initiator
		registerStrongParticipant(initiator)
		System.out.println("New initiator registered")
		emitIfReady
	}

	def synchronized registerParticipant(participant : EventListener) {
		participants += participant
		registerStrongParticipant(participant)
		System.out.println("New participant registered")
		emitIfReady
	}

	def synchronized unregisterInitiator(initiator : EventListener) {
		if (this.initiator === null) {
			throw new RuntimeException
		}
		unregister(initiator)
		this.initiator = null
		System.out.println("Initiator unregistered")
		//TODO emit something
	}

	def synchronized unregisterParticipant(participant : EventListener) {
		if (!participants.remove(participant)) {
			throw new RuntimeException
		}
		unregister(participant)
		System.out.println("Participant unregistered")
	}
	
	private synchronized def emitIfReady {
		// TODO determine when the protocol is ready
		if(initiator !== null && participants.size >= 2 && !protocolStarted) {
			protocolStarted = true
			emit(spaceID.ID, new ProtocolReady)
		}
	}
	
	// TODO how to specify how many participants are needed? I.e., When the protocol is ready to start
	
	// TODO how to determine when a protocol is finished?

}
