package io.sarl.api.protocol.examples.cnp.adapter.contractor

import io.sarl.api.core.Logging
import io.sarl.api.localstate.KnowledgeID
import io.sarl.api.localstate.LocalStateManager
import io.sarl.api.protocol.examples.cnp.adapter.events.Done
import io.sarl.api.protocol.examples.cnp.adapter.events.Failure
import io.sarl.api.protocol.examples.cnp.adapter.events.Propose
import io.sarl.api.protocol.examples.cnp.adapter.events.Refuse

behavior ContractorReactiveBehavior {

	uses LocalStateManager, Logging

	on Propose {
		setKnowledge(new KnowledgeID("offer", occurrence.iDt as String, occurrence.iDp as String), typeof(int),
			occurrence.offer)
		setKnowledge(new KnowledgeID("pdecision", occurrence.iDt as String, occurrence.iDp as String), typeof(String),
			occurrence.pDecision)
		info("I received a PROPOSE of " + occurrence.offer + " for task " + occurrence.task + " from " + occurrence.iDp)
	}

	on Refuse {
		setKnowledge(new KnowledgeID("outcome", occurrence.iDt as String, occurrence.iDp as String), typeof(String),
			occurrence.outcome)
		setKnowledge(new KnowledgeID("pdecision", occurrence.iDt as String, occurrence.iDp as String), typeof(String),
			occurrence.pDecision)
		info("I received a REFUSE of for task " + occurrence.task + " from " +
			occurrence.iDp)
	}
	
	on Done {
		setKnowledge(new KnowledgeID("outcome", occurrence.iDt as String, occurrence.iDp as String), typeof(String),
			occurrence.outcome)
		info("I received a DONE")
	}
	
	on Failure {
		setKnowledge(new KnowledgeID("outcome", occurrence.iDt as String, occurrence.iDp as String), typeof(String),
			occurrence.outcome)
		info("I received a FAILURE")
	}

}
