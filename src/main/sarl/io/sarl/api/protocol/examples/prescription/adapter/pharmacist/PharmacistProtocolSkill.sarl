package io.sarl.api.protocol.examples.prescription.adapter.pharmacist

import io.sarl.api.core.Behaviors
import io.sarl.api.core.Logging
import io.sarl.api.protocol.examples.prescription.adapter.events.Filled
import io.sarl.api.protocol.examples.prescription.adapter.events.FilledEnabled
import io.sarl.api.protocol.examples.prescription.adapter.events.PkgBound
import io.sarl.api.protocol.examples.prescription.adapter.events.RxBound
import io.sarl.api.protocol.examples.prescription.adapter.events.SymptomsBound
import io.sarl.lang.core.EventSpace
import io.sarl.lang.core.util.MutableOptional

/** 
 * parameters in id, out symptoms, in age
 * Patient -> any Doctor : Request [ in id, out symptoms, out age]
 * Doctor -> any Pharmacist : Prescribe [ in id, in symptoms, in age, out prescription]
 */
skill PharmacistProtocolSkill implements PharmacistProtocolCapacity {
	
	uses Logging, Behaviors

	val protocolSpace : EventSpace

	val symptoms : MutableOptional<String> = MutableOptional.empty
	val rx : MutableOptional<String> = MutableOptional.empty
	val pkg : MutableOptional<String> = MutableOptional.empty
	
	new (protocolSpace : EventSpace) {
		this.protocolSpace = protocolSpace
	}

	def setSymptoms(symptoms : String) {
		if (this.symptoms.isPresent) {
			throw new RuntimeException("Already bound")
		}
		this.symptoms.set(symptoms)
		wake(new SymptomsBound)
		wakeIfEnabled
	}

	def getSymptoms : String {
		this.symptoms.get
	}

	def setRx(rx : String) {
		if (this.rx.isPresent) {
			throw new RuntimeException("Already bound")
		}
		this.rx.set(rx)
		wake(new RxBound)
		wakeIfEnabled
	}

	def getRx : String {
		this.rx.get
	}

	def setPkg(pkg : String) {
		if (this.pkg.isPresent) {
			throw new RuntimeException("Already bound")
		}
		this.pkg.set(pkg)
		wake(new PkgBound)
		emitIfReady
	}

	private def wakeIfEnabled {
		if (this.rx.isPresent) {
			wake(new FilledEnabled)
		}
	}

	private def emitIfReady {
		if (this.rx.isPresent && this.pkg.isPresent) {
			var evt = new Filled(this.rx.get, this.pkg.get)
			info("Emit FILLED")
			this.protocolSpace.emit(owner.ID, evt)
		}
	}
	
}
