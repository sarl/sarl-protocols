package io.sarl.api.protocol.examples.cnp.adapter.participant

import io.sarl.api.core.ExternalContextAccess
import io.sarl.api.localstate.KnowledgeID
import io.sarl.api.localstate.LocalStateManager
import io.sarl.api.protocol.ProtocolMessage
import io.sarl.api.protocol.ProtocolSkill
import io.sarl.api.protocol.examples.cnp.adapter.events.Done
import io.sarl.api.protocol.examples.cnp.adapter.events.Failure
import io.sarl.api.protocol.examples.cnp.adapter.events.Propose
import io.sarl.api.protocol.examples.cnp.adapter.events.Refuse
import java.util.List
import java.util.UUID

skill ParticipantProtocolSkill implements ParticipantProtocolCapacity extends ProtocolSkill {
	
	uses LocalStateManager, ExternalContextAccess
	
	def getEnabledProposeMessages : List<ProtocolMessage<Propose>> {
		var enabledMessages = <ProtocolMessage<Propose>> newArrayList
		var scopes = getScopesFromName("task")
		for (scope : scopes) {
			var ^space = scope.findSpaceMachtingScope
			if (^space !== null) {
				synchronized(localStateManagerLock) {
					//isDefined(new KnowledgeID("p2", scope.keys)
					if(!isBound(new KnowledgeID("offer", scope.keys)) &&
					   !isBound(new KnowledgeID("pdecision", scope.keys))
					) {
						enabledMessages.add(
							new ProtocolMessage<Propose>(
								^space,
								new Propose(scope.keys.get(0) as String,
											scope.keys.get(1) as String,
											getKnowledge(new KnowledgeID("task", scope.keys), typeof(String))
								),
								getKnowledge(new KnowledgeID("contractor", scope.keys), typeof(UUID))
							)
						)
					}
				}
			}
		}
		return enabledMessages
	}
	
	def getEnabledRefuseMessages : List<ProtocolMessage<Refuse>> {
		var enabledMessages = <ProtocolMessage<Refuse>>newArrayList
		var scopes = getScopesFromName("task")
		for (scope : scopes) {
			var ^space = scope.findSpaceMachtingScope
			if (^space !== null) {
				synchronized(localStateManagerLock) {
					// isDefined(new KnowledgeID("p2", scope.keys)
					if (!isBound(new KnowledgeID("outcome", scope.keys)) && 
						!isBound(new KnowledgeID("pdecision", scope.keys))) {
						enabledMessages.add(
							new ProtocolMessage<Refuse>(
								^space,
								new Refuse(
									scope.keys.get(0) as String,
									scope.keys.get(1) as String,
									getKnowledge(new KnowledgeID("task", scope.keys), typeof(String))
								),
								getKnowledge(new KnowledgeID("contractor", scope.keys), typeof(UUID))
							)
						)
					}
				}
			}
		}
		return enabledMessages
	}
	
	def getEnabledDoneMessages : List<ProtocolMessage<Done>> {
		var enabledMessages = <ProtocolMessage<Done>>newArrayList
		var scopes = getScopesFromName("accept")
		for (scope : scopes) {
			var ^space = scope.findSpaceMachtingScope
			if (^space !== null) {
				synchronized (localStateManagerLock) {
					// isDefined(new KnowledgeID("p2", scope.keys)
					if (!isBound(new KnowledgeID("outcome", scope.keys))) {
						enabledMessages.add(
							new ProtocolMessage<Done>(
								^space,
								new Done(
									scope.keys.get(0) as String,
									scope.keys.get(1) as String,
									getKnowledge(new KnowledgeID("accept", scope.keys), typeof(String))
								),
								getKnowledge(new KnowledgeID("contractor", scope.keys), typeof(UUID))
							)
						)
					}
				}
			}
		}
		return enabledMessages
	}
	
	def getEnabledFailureMessages : List<ProtocolMessage<Failure>> {
		var enabledMessages = <ProtocolMessage<Failure>>newArrayList
		var scopes = getScopesFromName("accept")
		for (scope : scopes) {
			var ^space = scope.findSpaceMachtingScope
			if (^space !== null) {
				synchronized (localStateManagerLock) {
					// isDefined(new KnowledgeID("p2", scope.keys)
					if (!isBound(new KnowledgeID("outcome", scope.keys))) {
						enabledMessages.add(
							new ProtocolMessage<Failure>(
								^space,
								new Failure(
									scope.keys.get(0) as String,
									scope.keys.get(1) as String,
									getKnowledge(new KnowledgeID("accept", scope.keys), typeof(String))
								),
								getKnowledge(new KnowledgeID("contractor", scope.keys), typeof(UUID))
							)
						)
					}
				}
			}
		}
		return enabledMessages
	}
	
	def sendProposeMessage(m : ProtocolMessage<Propose>) {
		var idPDecision = new KnowledgeID("pdecision", m.evt.iDt, m.evt.iDp)
		var idOffer = new KnowledgeID("offer", m.evt.iDt, m.evt.iDp)
		var pDecision : String
		var offer : int
		synchronized(localStateManagerLock) {
			pDecision = getKnowledge(idPDecision, typeof(String))
			offer = getKnowledge(idOffer, typeof(int))
			bind(idPDecision)
			bind(idOffer)
		}
		m.evt.pDecision = pDecision
		m.evt.offer = offer
		emit(m.^space, m.evt)[it.ID == m.receiver]
	}
	
	def sendRefuseMessage(m : ProtocolMessage<Refuse>) {
		var idPDecision = new KnowledgeID("pdecision", m.evt.iDt, m.evt.iDp)
		var idOutcome = new KnowledgeID("outcome", m.evt.iDt, m.evt.iDp)
		var pDecision : String
		var outcome : String
		synchronized(localStateManagerLock) {
			pDecision = getKnowledge(idPDecision, typeof(String))
			outcome = getKnowledge(idOutcome, typeof(String))
			bind(idPDecision)
			bind(idOutcome)
		}
		m.evt.pDecision = pDecision
		m.evt.outcome = outcome
		emit(m.^space, m.evt)[it.ID == m.receiver]
	}
	
	def sendDoneMessage(m : ProtocolMessage<Done>) {
		var idOutcome = new KnowledgeID("outcome", m.evt.iDt, m.evt.iDp)
		var outcome : String
		synchronized (localStateManagerLock) {
			outcome = getKnowledge(idOutcome, typeof(String))
			bind(idOutcome)
		}
		m.evt.outcome = outcome
		emit(m.^space, m.evt)[it.ID == m.receiver]
	}
	
	def sendFailureMessage(m : ProtocolMessage<Failure>) {
		var idOutcome = new KnowledgeID("outcome", m.evt.iDt, m.evt.iDp)
		var outcome : String
		synchronized (localStateManagerLock) {
			outcome = getKnowledge(idOutcome, typeof(String))
			bind(idOutcome)
		}
		m.evt.outcome = outcome
		emit(m.^space, m.evt)[it.ID == m.receiver]
	}
	
}
