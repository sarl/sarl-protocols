package io.sarl.api.protocol.examples.prescription.^space

import io.sarl.api.protocol.ProtocolReady
import io.sarl.lang.core.EventListener
import io.sarl.sre.janus.spaces.OpenLocalEventSpace

class PrescriptionSpace extends OpenLocalEventSpace {
	
	var patient : EventListener
	var doctor : EventListener
	var pharmacist : EventListener
	
	def synchronized registerPatient(patient : EventListener) {
		if(this.patient !== null) {
			throw new RuntimeException
		}
		this.patient = patient
		registerStrongParticipant(patient)
		System.out.println("New patient registered")
		emitIfReady
	}

	def synchronized registerDoctor(doctor : EventListener) {
		if (this.doctor !== null) {
			throw new RuntimeException
		}
		this.doctor = doctor
		registerStrongParticipant(doctor)
		System.out.println("New doctor registered")
		emitIfReady
	}

	def synchronized registerPharmacist(pharmacist : EventListener) {
		if (this.pharmacist !== null) {
			throw new RuntimeException
		}
		this.pharmacist = pharmacist
		registerStrongParticipant(pharmacist)
		emitIfReady
	}

	def synchronized unregisterPatient(patient : EventListener) {
		if (this.patient === null) {
			throw new RuntimeException
		}
		unregister(patient)
		this.patient = null
		System.out.println("Patient unregistered")
		//TODO emit something
	}

	def synchronized unregisterDoctor(doctor : EventListener) {
		if (this.doctor === null) {
			throw new RuntimeException
		}
		unregister(doctor)
		this.doctor = null
		System.out.println("Doctor unregistered")
	}

	def synchronized unregisterPharmacist(pharmacist : EventListener) {
		if (this.pharmacist === null) {
			throw new RuntimeException
		}
		unregister(pharmacist)
		this.pharmacist = null
		System.out.println("Pharmacist unregistered")
	}
	
	private synchronized def emitIfReady {
		if(patient !== null && doctor !== null && pharmacist !== null) {
			emit(spaceID.ID, new ProtocolReady)
		}
	}
	
	// TODO how to determine when a protocol is finished?

}
