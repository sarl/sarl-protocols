package io.sarl.api.protocol.examples.netbill

import io.sarl.api.core.Initialize
import io.sarl.api.core.Logging
import io.sarl.api.localstate.KnowledgeID
import io.sarl.api.localstate.LocalStateManager
import io.sarl.api.protocol.ProtocolEnactment
import io.sarl.api.protocol.ProtocolMessage
import io.sarl.api.protocol.ProtocolReady
import io.sarl.api.protocol.examples.netbill.adapter.NetbillRole
import io.sarl.api.protocol.examples.netbill.adapter.customer.CustomerProtocolCapacity
import io.sarl.api.protocol.examples.netbill.adapter.events.Accept
import io.sarl.api.protocol.examples.netbill.adapter.events.EPO
import io.sarl.api.protocol.examples.netbill.adapter.events.Reject
import io.sarl.api.protocol.examples.netbill.adapter.^space.NetbillSpaceSpecification
import java.util.List
import java.util.UUID

agent CustomerAgent {
	
	uses ProtocolEnactment, Logging, LocalStateManager, CustomerProtocolCapacity
	
	var accepted = false
	
	on Initialize {
		loggingName = "Customer"
		//setSkill(new ProtocolEnactmentSkill)
		enact(NetbillSpaceSpecification, NetbillRole.CUSTOMER)
	}
	
	on ProtocolReady {

		var merchant = getProtocolParticipants(NetbillRole.MERCHANT).get(occurrence.source.spaceID).toList.get(0)
		
		setKnowledge(new KnowledgeID("merchant", occurrence.source.spaceID as String), typeof(UUID), merchant)
		
		enabledRequestMessages.forEach [
			setKnowledge(new KnowledgeID("item", it.evt.id), typeof(String), "bananas")
			sendRequestMessage(it)
			info("I send a REQUEST for " + it.evt.item)
		]
		var enabledAccepts : List<ProtocolMessage<Accept>> = enabledAcceptMessages
		var enabledRejects : List<ProtocolMessage<Reject>> = enabledRejectMessages
		while (enabledAccepts.isEmpty && enabledRejects.isEmpty) {
			enabledAccepts = enabledAcceptMessages
			enabledRejects = enabledRejectMessages
		}
		enabledAccepts.stream.forEach [
			var price = getKnowledge(new KnowledgeID("price", it.evt.id), typeof(int))
			if (price < 3) {
				setKnowledge(new KnowledgeID("decision", it.evt.id), typeof(String), "ok")
				setKnowledge(new KnowledgeID("outcome", it.evt.id), typeof(String), "...")
				sendAcceptMessage(it)
				accepted = true
				info("I send an ACCEPT for " + it.evt.item + " for a price of " + it.evt.price)
			}
		]
		enabledRejects.stream.forEach [
			var price = getKnowledge(new KnowledgeID("price", it.evt.id), typeof(int))
			if (price >= 3) {
				setKnowledge(new KnowledgeID("decision", it.evt.id), typeof(String), "ok")
				setKnowledge(new KnowledgeID("done", it.evt.id), typeof(String), "...")
				sendRejectMessage(it)
				info("I send a REJECT for " + it.evt.item + " for a price of " + it.evt.price)
			}
		]
		if (accepted) {
			var enabledEPOs : List<ProtocolMessage<EPO>> = enabledEPOMessages
			while (enabledEPOs.isEmpty) {
				enabledEPOs = enabledEPOMessages
			}
			enabledEPOs.stream.forEach [
				setKnowledge(new KnowledgeID("cc", it.evt.id), typeof(String), "ITXXX")
				sendEPOMessage(it)
			info("I send an EPO for " + it.evt.item + " for price " + it.evt.price)
		]
		}
		
	}
	
}