package io.sarl.api.protocol

import io.sarl.lang.core.EventListener
import io.sarl.lang.core.SpaceID
import io.sarl.sre.janus.services.logging.LoggingService
import io.sarl.sre.janus.spaces.OpenLocalEventSpace
import io.sarl.sre.janus.spaces.SpaceParticipantListener
import java.util.List
import java.util.UUID
import java.util.stream.Stream
import org.eclipse.xtend.lib.annotations.Accessors
import java.util.Collections

class ProtocolSpace extends OpenLocalEventSpace {

	@Accessors
	val rolePlayers = <ProtocolRole,List<EventListener>>newHashMap
	
	new(spaceId : SpaceID, participantListener : SpaceParticipantListener, loggingService : LoggingService, roles : ProtocolRole*) {
		super(spaceId, participantListener, loggingService)
		for(role : roles) {
			rolePlayers.put(role, newArrayList)
		}
	}
	
	def synchronized getRolePlayers(role : ProtocolRole) : Stream<UUID> {
		val res = rolePlayers.get(role)
		if(res == null) {
			return Collections.emptyList.stream
		}
		return res.stream.map[
			it.ID
		]
	}

	def synchronized register(role : ProtocolRole, player : EventListener) {
		var currentPlayers = rolePlayers.get(role)
		if(currentPlayers === null) {
			throw new RuntimeException("Unknown role")
		}
		if(role.maxCardinality <= currentPlayers.size) {
			throw new RuntimeException("Max cardinality reached")
		}
		currentPlayers.add(player)
		registerStrongParticipant(player)
		emitIfReady
	}

	def synchronized unregister(role : ProtocolRole, player : EventListener) {
		// TODO what happens if the unregistration breaks the minimum cardinality for the role?
		var currentPlayers = rolePlayers.get(role)
		if (currentPlayers == null) {
			throw new RuntimeException("Unknown role")
		}
		if(!currentPlayers.remove(player)) {
			throw new RuntimeException
		}
		unregister(player)
	}

	private def emitIfReady {
		for(role : rolePlayers.entrySet) {
			if(role.key.minCardinality > role.value.size) {
				return;
			}
		}
		emit(spaceID.ID, new ProtocolReady)
	}

}
