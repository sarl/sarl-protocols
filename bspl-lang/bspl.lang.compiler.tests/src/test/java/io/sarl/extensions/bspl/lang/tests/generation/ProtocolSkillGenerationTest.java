/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package io.sarl.extensions.bspl.lang.tests.generation;

import static io.sarl.tests.api.tools.TestUtils.multilineString;

import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Nested;
import org.junit.jupiter.api.Test;

import io.sarl.extensions.bspl.lang.tests.AbstractBsplTest;

/**
 * @author $Author: sgalland$
 * @version $Name$ $Revision$ $Date$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 */
@SuppressWarnings("all")
@DisplayName("ProtocolSkill generation")
public class ProtocolSkillGenerationTest {

	/**
	 * @author $Author: sgalland$
	 * @version $Name$ $Revision$ $Date$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	@Nested
	@DisplayName("Protocol Modifiers")
	public class ProtocolModifierTest extends AbstractBsplTest {

		@Test
		@DisplayName("Default visibility")
		public void defaultProtocol() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  role R3",
					"  R1 -> R2 : M",
					"  R3 -> R2 : M",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          val messageInstance = new M",
					"          enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}"
					);
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("Public visibility")
		public void firstOriginBsplProtocol() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"public protocol PROTO {",
					"  role R1, R2",
					"  role R3",
					"  R1 -> R2 : M",
					"  R3 -> R2 : M",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          val messageInstance = new M",
					"          enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}"
					);
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("Package visibility")
		public void packageProtocol() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"package protocol PROTO {",
					"  role R1, R2",
					"  role R3",
					"  R1 -> R2 : M",
					"  R3 -> R2 : M",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"package skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          val messageInstance = new M",
					"          enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}"
					);
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

	}

	/**
	 * @author $Author: sgalland$
	 * @version $Name$ $Revision$ $Date$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	@Nested
	@DisplayName("Public parameters")
	public class PublicParameterTest extends AbstractBsplTest {

		@Test
		@DisplayName("Capacity for R1")
		public void firstOriginBsplProtocol() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  role R3",
					"  R1 -> R2 : M",
					"  R3 -> R2 : M",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          val messageInstance = new M",
					"          enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}"
					);
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("Capacity for R3")
		public void secondOriginBsplProtocol() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  role R3",
					"  R1 -> R2 : M",
					"  R3 -> R2 : M",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R3ProtocolSkill extends ProtocolSkill implements R3ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          val messageInstance = new M",
					"          enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}"
					);
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R3ProtocolSkill", expected);
		}

		@Test
		@DisplayName("Multiple R1 for same message")
		public void multipleR1SingleMessage() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  role R3",
					"  R1 -> R2 : M",
					"  R3 -> R2 : M",
					"  R1 -> R3 : M",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          val messageInstance = new M",
					"          enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"        }",
					"      }",
					"    }",
					"    for (scope_1 : getDefinedForName(\"R3\")) {",
					"      val spaceInstance_1 = scope_1.findSpaceMachtingScope",
					"      if (spaceInstance_1 !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          val messageInstance_1 = new M",
					"          enabledMessages += new ProtocolMessage<M>(spaceInstance_1, messageInstance_1, new ScopedDataName(\"R3\", scope_1.scope).getKnowledge(typeof(UUID)))",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}"
					);
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("Multiple R1 for multiple messages")
		public void multipleR1ManyMessages() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  role R3",
					"  R1 -> R2 : M",
					"  R3 -> R2 : M",
					"  R1 -> R3 : M2",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.extensions.bspl.lang.tests.messages.M2",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          val messageInstance = new M",
					"          enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"",
					"  @SarlAsynchronousExecution",
					"  override getEnabledM2Messages : List<ProtocolMessage<M2>> {",
					"    val enabledMessages_1 = <ProtocolMessage<M2>>newArrayList",
					"    for (scope_1 : getDefinedForName(\"R3\")) {",
					"      val spaceInstance_1 = scope_1.findSpaceMachtingScope",
					"      if (spaceInstance_1 !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          val messageInstance_1 = new M2",
					"          enabledMessages_1 += new ProtocolMessage<M2>(spaceInstance_1, messageInstance_1, new ScopedDataName(\"R3\", scope_1.scope).getKnowledge(typeof(UUID)))",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages_1",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendM2Message(message : ProtocolMessage<M2>) {",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}"
					);
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg, 0 arg")
		public void message1argument0() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  R1 -> R2 : M",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          val messageInstance = new M",
					"          enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg, 1 arg in")
		public void message1argument1in() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  parameter A1 : double",
					"  R1 -> R2 : M [in A1]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined)) {",
					"            val messageInstance = new M",
					"            val inParamId = new ScopedDataName(\"A1\", scope.scope)",
					"            messageInstance.A1 = inParamId.getKnowledge(typeof(double))",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg, 2 args in")
		public void message1argument2in() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  parameter A1 : double",
					"  parameter A2 : String",
					"  R1 -> R2 : M [in A1, in A2]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined) && (new ScopedDataName(\"A2\", scope.scope).isDefined)) {",
					"            val messageInstance = new M",
					"            val inParamId = new ScopedDataName(\"A1\", scope.scope)",
					"            messageInstance.A1 = inParamId.getKnowledge(typeof(double))",
					"            val inParamId_1 = new ScopedDataName(\"A2\", scope.scope)",
					"            messageInstance.A2 = inParamId_1.getKnowledge(typeof(String))",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg, 3 args in")
		public void message1argument3in() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  parameter A1 : double",
					"  parameter A2 : String",
					"  parameter A3 : boolean",
					"  R1 -> R2 : M [in A1, in A2, in A3]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined) && (new ScopedDataName(\"A2\", scope.scope).isDefined) && (new ScopedDataName(\"A3\", scope.scope).isDefined)) {",
					"            val messageInstance = new M",
					"            val inParamId = new ScopedDataName(\"A1\", scope.scope)",
					"            messageInstance.A1 = inParamId.getKnowledge(typeof(double))",
					"            val inParamId_1 = new ScopedDataName(\"A2\", scope.scope)",
					"            messageInstance.A2 = inParamId_1.getKnowledge(typeof(String))",
					"            val inParamId_2 = new ScopedDataName(\"A3\", scope.scope)",
					"            messageInstance.A3 = inParamId_2.getKnowledge(typeof(boolean))",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg, 1 arg in, 1 key")
		public void message1argument1in1key() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  parameter A1 : double",
					"  R1 -> R2 : M [in A1 key]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined)) {",
					"            val messageInstance = new M",
					"            messageInstance.A1 = scope.scope.get(0) as double // A1",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg, 2 args in, 1 key")
		public void message1argument2in1k() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  parameter A1 : double",
					"  parameter A2 : String",
					"  R1 -> R2 : M [in A1 key, in A2]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined) && (new ScopedDataName(\"A2\", scope.scope).isDefined)) {",
					"            val messageInstance = new M",
					"            messageInstance.A1 = scope.scope.get(0) as double // A1",
					"            val inParamId = new ScopedDataName(\"A2\", scope.scope)",
					"            messageInstance.A2 = inParamId.getKnowledge(typeof(String))",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg, 3 args in, 1 key")
		public void message1argument3in1key() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  parameter A1 : double",
					"  parameter A2 : String",
					"  parameter A3 : boolean",
					"  R1 -> R2 : M [in A1 key, in A2, in A3]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined) && (new ScopedDataName(\"A2\", scope.scope).isDefined) && (new ScopedDataName(\"A3\", scope.scope).isDefined)) {",
					"            val messageInstance = new M",
					"            messageInstance.A1 = scope.scope.get(0) as double // A1",
					"            val inParamId = new ScopedDataName(\"A2\", scope.scope)",
					"            messageInstance.A2 = inParamId.getKnowledge(typeof(String))",
					"            val inParamId_1 = new ScopedDataName(\"A3\", scope.scope)",
					"            messageInstance.A3 = inParamId_1.getKnowledge(typeof(boolean))",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg, 1 arg out")
		public void message1argument1out() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  parameter A",
					"  R1 -> R2 : M [out A]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if (!(new ScopedDataName(\"A\", scope.scope).isBound)) {",
					"            val messageInstance = new M",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    val AId = new ScopedDataName(\"A\")",
					"    var A : Object",
					"    synchronized (WorkingMemoryLock) {",
					"      A = AId.getKnowledge(typeof(Object))",
					"      AId.bind",
					"    }",
					"    message.^event.A = A",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg, 1 arg in, 1 out")
		public void message1argument1in1out() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  parameter A1 : double",
					"  parameter A2",
					"  R1 -> R2 : M [in A1, out A2]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined) && !(new ScopedDataName(\"A2\", scope.scope).isBound)) {",
					"            val messageInstance = new M",
					"            val inParamId = new ScopedDataName(\"A1\", scope.scope)",
					"            messageInstance.A1 = inParamId.getKnowledge(typeof(double))",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    val A2Id = new ScopedDataName(\"A2\")",
					"    var A2 : Object",
					"    synchronized (WorkingMemoryLock) {",
					"      A2 = A2Id.getKnowledge(typeof(Object))",
					"      A2Id.bind",
					"    }",
					"    message.^event.A2 = A2",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg, 2 args in, 1 out")
		public void message1argument2in1out() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  parameter A1 : double",
					"  parameter A2 : String",
					"  parameter A3",
					"  R1 -> R2 : M [in A1, in A2, out A3]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined) && (new ScopedDataName(\"A2\", scope.scope).isDefined) && !(new ScopedDataName(\"A3\", scope.scope).isBound)) {",
					"            val messageInstance = new M",
					"            val inParamId = new ScopedDataName(\"A1\", scope.scope)",
					"            messageInstance.A1 = inParamId.getKnowledge(typeof(double))",
					"            val inParamId_1 = new ScopedDataName(\"A2\", scope.scope)",
					"            messageInstance.A2 = inParamId_1.getKnowledge(typeof(String))",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    val A3Id = new ScopedDataName(\"A3\")",
					"    var A3 : Object",
					"    synchronized (WorkingMemoryLock) {",
					"      A3 = A3Id.getKnowledge(typeof(Object))",
					"      A3Id.bind",
					"    }",
					"    message.^event.A3 = A3",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg, 3 args in, 1 out")
		public void message1argument3in1out() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  parameter A1 : double",
					"  parameter A2 : String",
					"  parameter A3 : boolean",
					"  parameter A4",
					"  R1 -> R2 : M [in A1, in A2, in A3, out A4]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined) && (new ScopedDataName(\"A2\", scope.scope).isDefined) && (new ScopedDataName(\"A3\", scope.scope).isDefined) && !(new ScopedDataName(\"A4\", scope.scope).isBound)) {",
					"            val messageInstance = new M",
					"            val inParamId = new ScopedDataName(\"A1\", scope.scope)",
					"            messageInstance.A1 = inParamId.getKnowledge(typeof(double))",
					"            val inParamId_1 = new ScopedDataName(\"A2\", scope.scope)",
					"            messageInstance.A2 = inParamId_1.getKnowledge(typeof(String))",
					"            val inParamId_2 = new ScopedDataName(\"A3\", scope.scope)",
					"            messageInstance.A3 = inParamId_2.getKnowledge(typeof(boolean))",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    val A4Id = new ScopedDataName(\"A4\")",
					"    var A4 : Object",
					"    synchronized (WorkingMemoryLock) {",
					"      A4 = A4Id.getKnowledge(typeof(Object))",
					"      A4Id.bind",
					"    }",
					"    message.^event.A4 = A4",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg, 1 arg in, 1 key, 1 out")
		public void message1argument1in1key1out() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  parameter A1 : double",
					"  parameter A2",
					"  R1 -> R2 : M [in A1 key, out A2]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined) && !(new ScopedDataName(\"A2\", scope.scope).isBound)) {",
					"            val messageInstance = new M",
					"            messageInstance.A1 = scope.scope.get(0) as double // A1",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    val A2Id = new ScopedDataName(\"A2\", message.^event.A1)",
					"    var A2 : Object",
					"    synchronized (WorkingMemoryLock) {",
					"      A2 = A2Id.getKnowledge(typeof(Object))",
					"      A2Id.bind",
					"    }",
					"    message.^event.A2 = A2",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg, 2 args in, 1 key, 1 arg out")
		public void message1argument2in1k1out() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  parameter A1 : double",
					"  parameter A2 : String",
					"  parameter A3",
					"  R1 -> R2 : M [in A1 key, in A2, out A3]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined) && (new ScopedDataName(\"A2\", scope.scope).isDefined) && !(new ScopedDataName(\"A3\", scope.scope).isBound)) {",
					"            val messageInstance = new M",
					"            messageInstance.A1 = scope.scope.get(0) as double // A1",
					"            val inParamId = new ScopedDataName(\"A2\", scope.scope)",
					"            messageInstance.A2 = inParamId.getKnowledge(typeof(String))",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    val A3Id = new ScopedDataName(\"A3\", message.^event.A1)",
					"    var A3 : Object",
					"    synchronized (WorkingMemoryLock) {",
					"      A3 = A3Id.getKnowledge(typeof(Object))",
					"      A3Id.bind",
					"    }",
					"    message.^event.A3 = A3",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg, 3 args in, 1 key, 1 arg out")
		public void message1argument3in1key1out() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  parameter A1 : double",
					"  parameter A2 : String",
					"  parameter A3 : boolean",
					"  parameter A4",
					"  R1 -> R2 : M [in A1 key, in A2, in A3, out A4]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined) && (new ScopedDataName(\"A2\", scope.scope).isDefined) && (new ScopedDataName(\"A3\", scope.scope).isDefined) && !(new ScopedDataName(\"A4\", scope.scope).isBound)) {",
					"            val messageInstance = new M",
					"            messageInstance.A1 = scope.scope.get(0) as double // A1",
					"            val inParamId = new ScopedDataName(\"A2\", scope.scope)",
					"            messageInstance.A2 = inParamId.getKnowledge(typeof(String))",
					"            val inParamId_1 = new ScopedDataName(\"A3\", scope.scope)",
					"            messageInstance.A3 = inParamId_1.getKnowledge(typeof(boolean))",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    val A4Id = new ScopedDataName(\"A4\", message.^event.A1)",
					"    var A4 : Object",
					"    synchronized (WorkingMemoryLock) {",
					"      A4 = A4Id.getKnowledge(typeof(Object))",
					"      A4Id.bind",
					"    }",
					"    message.^event.A4 = A4",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("Unconsistent prototypes")
		public void unconsistentPrototype() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2, R3",
					"  parameter A1 : double",
					"  parameter A2",
					"  R2 -> R1 : M [in A2]",
					"  R1 -> R2 : M [in A1, out A2]",
					"  R1 -> R3 : M",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined) && !(new ScopedDataName(\"A2\", scope.scope).isBound)) {",
					"            val messageInstance = new M",
					"            val inParamId = new ScopedDataName(\"A1\", scope.scope)",
					"            messageInstance.A1 = inParamId.getKnowledge(typeof(double))",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    for (scope_1 : getDefinedForName(\"R3\")) {",
					"      val spaceInstance_1 = scope_1.findSpaceMachtingScope",
					"      if (spaceInstance_1 !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          val messageInstance_1 = new M",
					"          enabledMessages += new ProtocolMessage<M>(spaceInstance_1, messageInstance_1, new ScopedDataName(\"R3\", scope_1.scope).getKnowledge(typeof(UUID)))",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    val A2Id = new ScopedDataName(\"A2\")",
					"    var A2 : Object",
					"    synchronized (WorkingMemoryLock) {",
					"      A2 = A2Id.getKnowledge(typeof(Object))",
					"      A2Id.bind",
					"    }",
					"    message.^event.A2 = A2",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg, 3 args in, 2 keys, 2 args out")
		public void message1argument3in2key2out() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  parameter A1 : double",
					"  parameter A2 : String",
					"  parameter A3 : boolean",
					"  parameter A4",
					"  parameter A5 : int",
					"  R1 -> R2 : M [in A1 key, in A2, out A5, in A3 key, out A4]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined) && (new ScopedDataName(\"A2\", scope.scope).isDefined) && !(new ScopedDataName(\"A5\", scope.scope).isBound) && (new ScopedDataName(\"A3\", scope.scope).isDefined) && !(new ScopedDataName(\"A4\", scope.scope).isBound)) {",
					"            val messageInstance = new M",
					"            messageInstance.A1 = scope.scope.get(0) as double // A1",
					"            val inParamId = new ScopedDataName(\"A2\", scope.scope)",
					"            messageInstance.A2 = inParamId.getKnowledge(typeof(String))",
					"            messageInstance.A3 = scope.scope.get(1) as boolean // A3",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    val A4Id = new ScopedDataName(\"A4\", message.^event.A1, message.^event.A3)",
					"    var A4 : Object",
					"    val A5Id = new ScopedDataName(\"A5\", message.^event.A1, message.^event.A3)",
					"    var A5 : int",
					"    synchronized (WorkingMemoryLock) {",
					"      A4 = A4Id.getKnowledge(typeof(Object))",
					"      A5 = A5Id.getKnowledge(typeof(int))",
					"      A4Id.bind",
					"      A5Id.bind",
					"    }",
					"    message.^event.A4 = A4",
					"    message.^event.A5 = A5",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg*2, 3 args in, 2 keys, 2 args out")
		public void message1bargument3in2key2out() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2, R3",
					"  parameter A1 : double",
					"  parameter A2 : String",
					"  parameter A3 : boolean",
					"  parameter A4",
					"  parameter A5 : int",
					"  R1 -> R2 : M [in A1 key, in A2, out A5, in A3 key, out A4]",
					"  R1 -> R3 : M [in A1 key, in A2, out A5, in A3 key, out A4]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined) && (new ScopedDataName(\"A2\", scope.scope).isDefined) && !(new ScopedDataName(\"A5\", scope.scope).isBound) && (new ScopedDataName(\"A3\", scope.scope).isDefined) && !(new ScopedDataName(\"A4\", scope.scope).isBound)) {",
					"            val messageInstance = new M",
					"            messageInstance.A1 = scope.scope.get(0) as double // A1",
					"            val inParamId = new ScopedDataName(\"A2\", scope.scope)",
					"            messageInstance.A2 = inParamId.getKnowledge(typeof(String))",
					"            messageInstance.A3 = scope.scope.get(1) as boolean // A3",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    for (scope_1 : getDefinedForName(\"R3\")) {",
					"      val spaceInstance_1 = scope_1.findSpaceMachtingScope",
					"      if (spaceInstance_1 !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope_1.scope).isDefined) && (new ScopedDataName(\"A2\", scope_1.scope).isDefined) && !(new ScopedDataName(\"A5\", scope_1.scope).isBound) && (new ScopedDataName(\"A3\", scope_1.scope).isDefined) && !(new ScopedDataName(\"A4\", scope_1.scope).isBound)) {",
					"            val messageInstance_1 = new M",
					"            messageInstance_1.A1 = scope_1.scope.get(0) as double // A1",
					"            val inParamId_1 = new ScopedDataName(\"A2\", scope_1.scope)",
					"            messageInstance_1.A2 = inParamId_1.getKnowledge(typeof(String))",
					"            messageInstance_1.A3 = scope_1.scope.get(1) as boolean // A3",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance_1, messageInstance_1, new ScopedDataName(\"R3\", scope_1.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    val A4Id = new ScopedDataName(\"A4\", message.^event.A1, message.^event.A3)",
					"    var A4 : Object",
					"    val A5Id = new ScopedDataName(\"A5\", message.^event.A1, message.^event.A3)",
					"    var A5 : int",
					"    synchronized (WorkingMemoryLock) {",
					"      A4 = A4Id.getKnowledge(typeof(Object))",
					"      A5 = A5Id.getKnowledge(typeof(int))",
					"      A4Id.bind",
					"      A5Id.bind",
					"    }",
					"    message.^event.A4 = A4",
					"    message.^event.A5 = A5",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

	}

	/**
	 * @author $Author: sgalland$
	 * @version $Name$ $Revision$ $Date$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	@Nested
	@DisplayName("Private parameters")
	public class PrivateParameterTest extends AbstractBsplTest {

		@Test
		@DisplayName("1 msg, 1 arg in")
		public void message1argument1in() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  private parameter A1 : double",
					"  R1 -> R2 : M [in A1]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined)) {",
					"            val messageInstance = new M",
					"            // Ignoring private parameter: A1",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg, 2 args in")
		public void message1argument2in() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  parameter A1 : double",
					"  private parameter A2 : String",
					"  R1 -> R2 : M [in A1, in A2]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined) && (new ScopedDataName(\"A2\", scope.scope).isDefined)) {",
					"            val messageInstance = new M",
					"            val inParamId = new ScopedDataName(\"A1\", scope.scope)",
					"            messageInstance.A1 = inParamId.getKnowledge(typeof(double))",
					"            // Ignoring private parameter: A2",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg, 3 args in")
		public void message1argument3in() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  parameter A1 : double",
					"  private parameter A2 : String",
					"  parameter A3 : boolean",
					"  R1 -> R2 : M [in A1, in A2, in A3]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined) && (new ScopedDataName(\"A2\", scope.scope).isDefined) && (new ScopedDataName(\"A3\", scope.scope).isDefined)) {",
					"            val messageInstance = new M",
					"            val inParamId = new ScopedDataName(\"A1\", scope.scope)",
					"            messageInstance.A1 = inParamId.getKnowledge(typeof(double))",
					"            // Ignoring private parameter: A2",
					"            val inParamId_1 = new ScopedDataName(\"A3\", scope.scope)",
					"            messageInstance.A3 = inParamId_1.getKnowledge(typeof(boolean))",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg, 1 arg in, 1 key")
		public void message1argument1in1key() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  private parameter A1 : double",
					"  R1 -> R2 : M [in A1 key]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined)) {",
					"            val messageInstance = new M",
					"            // Ignoring private parameter: A1",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg, 2 args in, 1 key")
		public void message1argument2in1k() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  parameter A1 : double",
					"  private parameter A2 : String",
					"  R1 -> R2 : M [in A1 key, in A2]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined) && (new ScopedDataName(\"A2\", scope.scope).isDefined)) {",
					"            val messageInstance = new M",
					"            messageInstance.A1 = scope.scope.get(0) as double // A1",
					"            // Ignoring private parameter: A2",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg, 3 args in, 1 key")
		public void message1argument3in1key() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  parameter A1 : double",
					"  private parameter A2 : String",
					"  parameter A3 : boolean",
					"  R1 -> R2 : M [in A1 key, in A2, in A3]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined) && (new ScopedDataName(\"A2\", scope.scope).isDefined) && (new ScopedDataName(\"A3\", scope.scope).isDefined)) {",
					"            val messageInstance = new M",
					"            messageInstance.A1 = scope.scope.get(0) as double // A1",
					"            // Ignoring private parameter: A2",
					"            val inParamId = new ScopedDataName(\"A3\", scope.scope)",
					"            messageInstance.A3 = inParamId.getKnowledge(typeof(boolean))",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg, 1 arg out")
		public void message1argument1out() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  private parameter A",
					"  R1 -> R2 : M [out A]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if (!(new ScopedDataName(\"A\", scope.scope).isBound)) {",
					"            val messageInstance = new M",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    val AId = new ScopedDataName(\"A\")",
					"    var A : Object",
					"    synchronized (WorkingMemoryLock) {",
					"      A = AId.getKnowledge(typeof(Object))",
					"      AId.bind",
					"    }",
					"    message.^event.A = A",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg, 1 arg in, 1 out")
		public void message1argument1in1out() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  private parameter A1 : double",
					"  parameter A2",
					"  R1 -> R2 : M [in A1, out A2]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined) && !(new ScopedDataName(\"A2\", scope.scope).isBound)) {",
					"            val messageInstance = new M",
					"            // Ignoring private parameter: A1",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    val A2Id = new ScopedDataName(\"A2\")",
					"    var A2 : Object",
					"    synchronized (WorkingMemoryLock) {",
					"      A2 = A2Id.getKnowledge(typeof(Object))",
					"      A2Id.bind",
					"    }",
					"    message.^event.A2 = A2",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg, 2 args in, 1 out")
		public void message1argument2in1out() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  parameter A1 : double",
					"  private parameter A2 : String",
					"  parameter A3",
					"  R1 -> R2 : M [in A1, in A2, out A3]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined) && (new ScopedDataName(\"A2\", scope.scope).isDefined) && !(new ScopedDataName(\"A3\", scope.scope).isBound)) {",
					"            val messageInstance = new M",
					"            val inParamId = new ScopedDataName(\"A1\", scope.scope)",
					"            messageInstance.A1 = inParamId.getKnowledge(typeof(double))",
					"            // Ignoring private parameter: A2",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    val A3Id = new ScopedDataName(\"A3\")",
					"    var A3 : Object",
					"    synchronized (WorkingMemoryLock) {",
					"      A3 = A3Id.getKnowledge(typeof(Object))",
					"      A3Id.bind",
					"    }",
					"    message.^event.A3 = A3",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg, 3 args in, 1 out")
		public void message1argument3in1out() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  parameter A1 : double",
					"  parameter A2 : String",
					"  private parameter A3 : boolean",
					"  parameter A4",
					"  R1 -> R2 : M [in A1, in A2, in A3, out A4]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined) && (new ScopedDataName(\"A2\", scope.scope).isDefined) && (new ScopedDataName(\"A3\", scope.scope).isDefined) && !(new ScopedDataName(\"A4\", scope.scope).isBound)) {",
					"            val messageInstance = new M",
					"            val inParamId = new ScopedDataName(\"A1\", scope.scope)",
					"            messageInstance.A1 = inParamId.getKnowledge(typeof(double))",
					"            val inParamId_1 = new ScopedDataName(\"A2\", scope.scope)",
					"            messageInstance.A2 = inParamId_1.getKnowledge(typeof(String))",
					"            // Ignoring private parameter: A3",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    val A4Id = new ScopedDataName(\"A4\")",
					"    var A4 : Object",
					"    synchronized (WorkingMemoryLock) {",
					"      A4 = A4Id.getKnowledge(typeof(Object))",
					"      A4Id.bind",
					"    }",
					"    message.^event.A4 = A4",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg, 1 arg in, 1 key, 1 out")
		public void message1argument1in1key1out() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  private parameter A1 : double",
					"  parameter A2",
					"  R1 -> R2 : M [in A1 key, out A2]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined) && !(new ScopedDataName(\"A2\", scope.scope).isBound)) {",
					"            val messageInstance = new M",
					"            // Ignoring private parameter: A1",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    val A2Id = new ScopedDataName(\"A2\", message.^event.A1)",
					"    var A2 : Object",
					"    synchronized (WorkingMemoryLock) {",
					"      A2 = A2Id.getKnowledge(typeof(Object))",
					"      A2Id.bind",
					"    }",
					"    message.^event.A2 = A2",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg, 2 args in, 1 key, 1 arg out")
		public void message1argument2in1k1out() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  private parameter A1 : double",
					"  private parameter A2 : String",
					"  parameter A3",
					"  R1 -> R2 : M [in A1 key, in A2, out A3]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined) && (new ScopedDataName(\"A2\", scope.scope).isDefined) && !(new ScopedDataName(\"A3\", scope.scope).isBound)) {",
					"            val messageInstance = new M",
					"            // Ignoring private parameter: A1",
					"            // Ignoring private parameter: A2",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    val A3Id = new ScopedDataName(\"A3\", message.^event.A1)",
					"    var A3 : Object",
					"    synchronized (WorkingMemoryLock) {",
					"      A3 = A3Id.getKnowledge(typeof(Object))",
					"      A3Id.bind",
					"    }",
					"    message.^event.A3 = A3",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg, 3 args in, 1 key, 1 arg out")
		public void message1argument3in1key1out() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  parameter A1 : double",
					"  private parameter A2 : String",
					"  parameter A3 : boolean",
					"  private parameter A4",
					"  R1 -> R2 : M [in A1 key, in A2, in A3, out A4]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined) && (new ScopedDataName(\"A2\", scope.scope).isDefined) && (new ScopedDataName(\"A3\", scope.scope).isDefined) && !(new ScopedDataName(\"A4\", scope.scope).isBound)) {",
					"            val messageInstance = new M",
					"            messageInstance.A1 = scope.scope.get(0) as double // A1",
					"            // Ignoring private parameter: A2",
					"            val inParamId = new ScopedDataName(\"A3\", scope.scope)",
					"            messageInstance.A3 = inParamId.getKnowledge(typeof(boolean))",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    val A4Id = new ScopedDataName(\"A4\", message.^event.A1)",
					"    var A4 : Object",
					"    synchronized (WorkingMemoryLock) {",
					"      A4 = A4Id.getKnowledge(typeof(Object))",
					"      A4Id.bind",
					"    }",
					"    message.^event.A4 = A4",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("Unconsistent prototypes")
		public void unconsistentPrototype() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2, R3",
					"  private parameter A1 : double",
					"  parameter A2",
					"  R2 -> R1 : M [in A2]",
					"  R1 -> R2 : M [in A1, out A2]",
					"  R1 -> R3 : M",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined) && !(new ScopedDataName(\"A2\", scope.scope).isBound)) {",
					"            val messageInstance = new M",
					"            // Ignoring private parameter: A1",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    for (scope_1 : getDefinedForName(\"R3\")) {",
					"      val spaceInstance_1 = scope_1.findSpaceMachtingScope",
					"      if (spaceInstance_1 !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          val messageInstance_1 = new M",
					"          enabledMessages += new ProtocolMessage<M>(spaceInstance_1, messageInstance_1, new ScopedDataName(\"R3\", scope_1.scope).getKnowledge(typeof(UUID)))",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    val A2Id = new ScopedDataName(\"A2\")",
					"    var A2 : Object",
					"    synchronized (WorkingMemoryLock) {",
					"      A2 = A2Id.getKnowledge(typeof(Object))",
					"      A2Id.bind",
					"    }",
					"    message.^event.A2 = A2",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg, 3 args in, 2 keys, 2 args out")
		public void message1argument3in2key2out() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  parameter A1 : double",
					"  private parameter A2 : String",
					"  parameter A3 : boolean",
					"  parameter A4",
					"  parameter A5 : int",
					"  R1 -> R2 : M [in A1 key, in A2, out A5, in A3 key, out A4]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined) && (new ScopedDataName(\"A2\", scope.scope).isDefined) && !(new ScopedDataName(\"A5\", scope.scope).isBound) && (new ScopedDataName(\"A3\", scope.scope).isDefined) && !(new ScopedDataName(\"A4\", scope.scope).isBound)) {",
					"            val messageInstance = new M",
					"            messageInstance.A1 = scope.scope.get(0) as double // A1",
					"            // Ignoring private parameter: A2",
					"            messageInstance.A3 = scope.scope.get(1) as boolean // A3",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    val A4Id = new ScopedDataName(\"A4\", message.^event.A1, message.^event.A3)",
					"    var A4 : Object",
					"    val A5Id = new ScopedDataName(\"A5\", message.^event.A1, message.^event.A3)",
					"    var A5 : int",
					"    synchronized (WorkingMemoryLock) {",
					"      A4 = A4Id.getKnowledge(typeof(Object))",
					"      A5 = A5Id.getKnowledge(typeof(int))",
					"      A4Id.bind",
					"      A5Id.bind",
					"    }",
					"    message.^event.A4 = A4",
					"    message.^event.A5 = A5",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("1 msg*2, 3 args in, 2 keys, 2 args out")
		public void message1bargument3in2key2out() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2, R3",
					"  parameter A1 : double",
					"  private parameter A2 : String",
					"  parameter A3 : boolean",
					"  parameter A4",
					"  parameter A5 : int",
					"  R1 -> R2 : M [in A1 key, in A2, out A5, in A3 key, out A4]",
					"  R1 -> R3 : M [in A1 key, in A2, out A5, in A3 key, out A4]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope.scope).isDefined) && (new ScopedDataName(\"A2\", scope.scope).isDefined) && !(new ScopedDataName(\"A5\", scope.scope).isBound) && (new ScopedDataName(\"A3\", scope.scope).isDefined) && !(new ScopedDataName(\"A4\", scope.scope).isBound)) {",
					"            val messageInstance = new M",
					"            messageInstance.A1 = scope.scope.get(0) as double // A1",
					"            // Ignoring private parameter: A2",
					"            messageInstance.A3 = scope.scope.get(1) as boolean // A3",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    for (scope_1 : getDefinedForName(\"R3\")) {",
					"      val spaceInstance_1 = scope_1.findSpaceMachtingScope",
					"      if (spaceInstance_1 !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"A1\", scope_1.scope).isDefined) && (new ScopedDataName(\"A2\", scope_1.scope).isDefined) && !(new ScopedDataName(\"A5\", scope_1.scope).isBound) && (new ScopedDataName(\"A3\", scope_1.scope).isDefined) && !(new ScopedDataName(\"A4\", scope_1.scope).isBound)) {",
					"            val messageInstance_1 = new M",
					"            messageInstance_1.A1 = scope_1.scope.get(0) as double // A1",
					"            // Ignoring private parameter: A2",
					"            messageInstance_1.A3 = scope_1.scope.get(1) as boolean // A3",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance_1, messageInstance_1, new ScopedDataName(\"R3\", scope_1.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    val A4Id = new ScopedDataName(\"A4\", message.^event.A1, message.^event.A3)",
					"    var A4 : Object",
					"    val A5Id = new ScopedDataName(\"A5\", message.^event.A1, message.^event.A3)",
					"    var A5 : int",
					"    synchronized (WorkingMemoryLock) {",
					"      A4 = A4Id.getKnowledge(typeof(Object))",
					"      A5 = A5Id.getKnowledge(typeof(int))",
					"      A4Id.bind",
					"      A5Id.bind",
					"    }",
					"    message.^event.A4 = A4",
					"    message.^event.A5 = A5",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}");
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

	}

	/**
	 * @author $Author: sgalland$
	 * @version $Name$ $Revision$ $Date$
	 * @mavengroupid $GroupId$
	 * @mavenartifactid $ArtifactId$
	 */
	@Nested
	@DisplayName("Argument modifiers")
	public class NilArgumentTest extends AbstractBsplTest {

		@Test
		@DisplayName("out")
		public void outModifier() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  parameter P1",
					"  R1 -> R2 : M [out P1]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if (!(new ScopedDataName(\"P1\", scope.scope).isBound)) {",
					"            val messageInstance = new M",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    val P1Id = new ScopedDataName(\"P1\")",
					"    var P1 : Object",
					"    synchronized (WorkingMemoryLock) {",
					"      P1 = P1Id.getKnowledge(typeof(Object))",
					"      P1Id.bind",
					"    }",
					"    message.^event.P1 = P1",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}"
					);
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("in")
		public void inModifier() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  parameter P1",
					"  R1 -> R2 : M [in P1]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if ((new ScopedDataName(\"P1\", scope.scope).isDefined)) {",
					"            val messageInstance = new M",
					"            val inParamId = new ScopedDataName(\"P1\", scope.scope)",
					"            messageInstance.P1 = inParamId.getKnowledge(typeof(Object))",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}"
					);
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("any")
		public void anyModifier() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  parameter P1",
					"  R1 -> R2 : M [any P1]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          val messageInstance = new M",
					"          val inParamId = new ScopedDataName(\"P1\", scope.scope)",
					"          if (inParamId.isDefined) {",
					"            messageInstance.P1 = inParamId.getKnowledge(typeof(Object))",
					"          }",
					"          enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    val P1Id = new ScopedDataName(\"P1\")",
					"    var P1 : Object",
					"    synchronized (WorkingMemoryLock) {",
					"      P1 = P1Id.getKnowledge(typeof(Object))",
					"      P1Id.bind",
					"    }",
					"    message.^event.P1 = P1",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}"
					);
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("nil")
		public void nilModifier() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  parameter P1",
					"  R1 -> R2 : M [nil P1]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          if (!(new ScopedDataName(\"P1\", scope.scope).isDefined)) {",
					"            val messageInstance = new M",
					"            enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"          }",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}"
					);
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

		@Test
		@DisplayName("opt")
		public void optModifier() throws Exception {
			var source = multilineString(
					"package io.sarl.extensions.bspl.lang.tests",
					"protocol PROTO {",
					"  role R1, R2",
					"  parameter P1",
					"  R1 -> R2 : M [opt P1]",
					"}");
			var expected = multilineString(
					"/* This file was automatically generated. Do not change its content. */",
					"",
					"package io.sarl.extensions.bspl.lang.tests",
					"",
					"import io.sarl.api.core.ExternalContextAccess",
					"import io.sarl.api.naming.name.ScopedDataName",
					"import io.sarl.api.workingmemory.WorkingMemory",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage",
					"import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSkill",
					"import io.sarl.extensions.bspl.lang.tests.messages.M",
					"import io.sarl.lang.core.annotation.SarlAsynchronousExecution",
					"import java.util.List",
					"import java.util.UUID",
					"",
					"public skill R1ProtocolSkill extends ProtocolSkill implements R1ProtocolCapacity {",
					"  uses WorkingMemory, ExternalContextAccess",
					"  @SarlAsynchronousExecution",
					"  override getEnabledMMessages : List<ProtocolMessage<M>> {",
					"    val enabledMessages = <ProtocolMessage<M>>newArrayList",
					"    for (scope : getDefinedForName(\"R2\")) {",
					"      val spaceInstance = scope.findSpaceMachtingScope",
					"      if (spaceInstance !== null) {",
					"        synchronized (WorkingMemoryLock) {",
					"          val messageInstance = new M",
					"          val inParamId = new ScopedDataName(\"P1\", scope.scope)",
					"          if (inParamId.isDefined) {",
					"            messageInstance.P1 = inParamId.getKnowledge(typeof(Object))",
					"          }",
					"          enabledMessages += new ProtocolMessage<M>(spaceInstance, messageInstance, new ScopedDataName(\"R2\", scope.scope).getKnowledge(typeof(UUID)))",
					"        }",
					"      }",
					"    }",
					"    return enabledMessages",
					"  }",
					"  @SarlAsynchronousExecution",
					"  override sendMMessage(message : ProtocolMessage<M>) {",
					"    emit(message.^space, message.^event) [it.ID == message.receiver]",
					"  }",
					"}"
					);
			getCompileHelper().assertCompilesTo(source, "io.sarl.extensions.bspl.lang.tests.R1ProtocolSkill", expected);
		}

	}

}
