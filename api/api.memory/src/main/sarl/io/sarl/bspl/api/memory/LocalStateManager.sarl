/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.bspl.api.memory

import io.sarl.lang.core.DefaultSkill
import java.util.List

/**
 * Capacity to access to the agent local state or agent memory.
 * If the agent does not provide a specific skill for this capacity,
 * the skill to be used is {@link TreeMapStateManager}.
 *
 * <p>A knowledge value cannot be equal to {@code null}. Assigning
 * {@code null} to knowledge value removes the knowledge from the base.  
 *
 * @author $Author: stedeschi$
 * @author $Author: sgalland$
 * @author $Author: mbaldoni$
 * @author $Author: cbaroglio$
 * @author $Author: rmicalizio$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.15
 */
@DefaultSkill(typeof(TreeMapStateManager))
capacity LocalStateManager {

	/** Replies the knowledge value that is identified by the given id.
	 *
	 * @param <T> the expected type of the data.
	 * @param id the identifier of the knowledge to be extracted from the local state.
	 * @param type the expected type of the data. If this type is not specified, the function
	 *     replies the value as-is. Otherwise, if the value is not compatible with the
	 *     given type, a {@code ClassCastException} is thrown.
	 * @return the knowledge value. The value {@code null} could not be replied.
	 */
	def getKnowledge(id : KnowledgeID, type : Class<T>) : T with T
	
	/** Replies the knowledge value that is identified by the given id.
	 *
	 * @param id the identifier of the knowledge to be extracted from the local state.
	 * @return the knowledge value. The value {@code null} could not be replied.
	 */
	def getKnowledge(id : KnowledgeID) : Object

	/** Change the knowledge value in the agent memory.
	 *
	 * <p>A knowledge value cannot be equal to {@code null}. Assigning
	 * {@code null} to knowledge value removes the knowledge from the base.  
	 *
	 * @param id the identifier of the knowledge to be saved in the local state.
	 * @param value the new value of the knowledge. If {@code null} is
	 *     provided as argument, the knowledge is removed from the base.
	 *     In this case, it is similar to a call to
	 *     {@link #removeKnowledge(KnowledgeID)}.
	 */
	def setKnowledge(id : KnowledgeID, value : Object)

	/** Save the knowledge value in the agent memory if this memory does not
	 * contain a value for this knowledge.
	 *
	 * <p>A knowledge value cannot be equal to {@code null}. Assigning
	 * {@code null} to knowledge value removes the knowledge from the base.  
	 *
	 * @param id the identifier of the knowledge to be saved in the local state.
	 * @param value the new value of the knowledge. If {@code null} is
	 *     provided as argument, the knowledge is removed from the base.
	 *     In this case, it is similar to a call to
	 *     {@link #removeKnowledge(KnowledgeID)}.
	 */
	def setKnowledgeIfAbsent(id : KnowledgeID, value : Object)
	
	/** Replies all the identifiers that are known in the agent memory and associated
	 * to the given name.
	 * Since multiple knowledge may have the same name, the scope of the knowledge is
	 * used to make them unique in the agent local state. This function replies
	 * all the knowledges that are stored in the local state whatever their scopes.
	 *
	 * @param name the name of the knowledge to search for.
	 * @return the identifiers of the knowledge with the given name.
	 */
	def getIDsWithName(name : String) : List<KnowledgeID>
	 
	/** Replies if the given identifier corresponds to a knowledge that is
	 * stored in the agent local state.
	 *
	 * @param id the identifier to search for.
	 * @return {@code true} if a knowledge is stored in the agent local state. Otherwise
	 *     {@code false}.
	 */
	def isDefined(id : KnowledgeID) : boolean
	
	/** Remove the knowledge from the agent local state.
	 *
	 * @param id the identifier to search for.
	 */
	def removeKnowledge(id : KnowledgeID)

	/** Replies a resource that enables to have synchronized access to the
	 * agent memory. This resource could be used in a {@code synchronized}
	 * block of code:
	 *
	 * <pre><code>
	 * synchronized(localStateManager.localStateManagerLock) {
	 *    ...
	 * }
	 * </code></pre>
	 *
	 * @param id the identifier to search for.
	 */
	def getLocalStateManagerLock : Object
	

	/** Replies all the identifiers stored in the local state.
	 * This resource could be used in a {@code synchronized}
	 * block of code:
	 *
	 * <pre><code>
	 * synchronized(localStateManager.localStateManagerLock) {
	 *    ...
	 * }
	 * </code></pre>
	 *
	 * @return the identifiers.
	 */
	def getIDs : Iterable<KnowledgeID>

}
