/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.bspl.api.memory

import java.util.Collections
import java.util.Comparator
import java.util.List
import java.util.Map
import java.util.TreeMap

/**
 * Standard skill to access to the agent local state or agent memory.
 * In this skill, the agent is stored in a local data structure based
 * on a {@code TreeMap}.
 *
 * @author $Author: stedeschi$
 * @author $Author: sgalland$
 * @author $Author: mbaldoni$
 * @author $Author: cbaroglio$
 * @author $Author: rmicalizio$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.15
 */
skill TreeMapStateManager extends AbstractLocalStateManager {

	val localState : TreeMap<KnowledgeID, Object>

	/** Constructor.
	 *
	 * @param initialBase the initial content of the knowledge base. If this argument is not provided,
	 *     the knowledge database is empty.
	 * @param comparator the comparator for ensuring unique knowledge identifiers in the base. If this argument
	 *     is not provided, the natural order of {@code KnowledgeID} is used.
	 */
	new (initialBase : Map<KnowledgeID, Object> = null, comparator : Comparator<KnowledgeID> = null) {
		var cmp = comparator
		if (cmp === null) {
			cmp = [a, b | a <=> b]
		} 
		this.localState = new TreeMap(cmp)
		if (initialBase !== null) {
			for (entry : initialBase.entrySet) {
				val k = entry.key
				val v = entry.value
				if (k !== null && v !== null) {
					this.localState.put(k, v)
				}
			}
		}
	}

	override getIDs : Iterable<KnowledgeID> {
		Collections::unmodifiableSet(this.localState.keySet)
	}

	override getKnowledge(id : KnowledgeID, type : Class<T>) : T with T {
		synchronized (getLocalStateManagerLock) {
			val value = localState.computeIfAbsent(id) [ throw new KnowledgeMissingException ]
			if (type === null) {
				value as T
			} else {
				type.cast(value)
			}
		}
	}

	override setKnowledge(id : KnowledgeID, value : Object) {
		if (id !== null) {
			synchronized (getLocalStateManagerLock) {
				if (value === null) {
					this.localState.remove(id)
				} else {
					this.localState.put(id, value)
				}
			}
		}
	}

	override setKnowledgeIfAbsent(id : KnowledgeID, value : Object) {
		if (id !== null) {
			synchronized (getLocalStateManagerLock) {
				if (value === null) {
					this.localState.remove(id)
				} else {
					this.localState.putIfAbsent(id, value)
				}
			}
		}
	}

	override isDefined(id : KnowledgeID) : boolean {
		if (id !== null) {
			synchronized (getLocalStateManagerLock) {
				return this.localState.containsKey(id)
			}
		}
		return false;
	}

	override removeKnowledge(id : KnowledgeID) {
		if (id !== null) {
			synchronized (getLocalStateManagerLock) {
				this.localState.remove(id)
			}
		}
	}
	
	override getIDsWithName(name : String) : List<KnowledgeID> {
		synchronized (getLocalStateManagerLock) {
			val list = <KnowledgeID>newArrayList
			if (name !== null && !name.isEmpty) {
				for (key : this.localState.keySet) {
					if (key.name == name) {
						list += key
					}
				}
			}
			return list
		}
	}
	
}
