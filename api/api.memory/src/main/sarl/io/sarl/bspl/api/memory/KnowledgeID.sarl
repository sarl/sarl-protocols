/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.bspl.api.memory

import com.google.common.base.Objects
import com.google.common.base.Strings
import java.util.Arrays
import org.eclipse.xtend.lib.annotations.Accessors
import org.eclipse.xtend.lib.annotations.ToString
import org.eclipse.xtext.xbase.lib.Inline

/**
 * Definition of the identifier for a knowledge in the agent
 * memory or agent state.
 *
 * @author $Author: stedeschi$
 * @author $Author: sgalland$
 * @author $Author: mbaldoni$
 * @author $Author: cbaroglio$
 * @author $Author: rmicalizio$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.15
 */
@ToString
@SuppressWarnings("io.sarl.lang.validation.IssueCodes.manual_inline_definition")
class KnowledgeID implements Comparable<KnowledgeID>, Cloneable {

	/** Name of the knowledge to be identified.
	 */	
	@Accessors
	val name : String

	/** Sequence of keys or identifiers that corresponds to the
	 * scope of the knowledge to be identified.
	 */	
	//TODO Move from String to URI
	@Accessors
	val keys : String[]

	/** Constructor.
	 *
	 * @param name the name of the knowledge to be identified.
	 * @param keys the keys or identifiers that form the scope of the knowledge.
	 */
	new (name : String, keys : String*) {
		assert !Strings.isNullOrEmpty(name)
		assert keys !== null
		this.name = name
		this.keys = keys
	}

    @Pure
	override compareTo(o : KnowledgeID) : int {
		if (o === null) {
			return 1
		}
		var res = this.name <=> o.name
		if (res !== 0) {
			return res
		}
		if (this.keys === null) {
			return if (o.keys === null) 0 else -1
		}
		for (var i = 0; i < this.keys.length; i++) {
			val ka = this.keys.get(i)
			val kb = o.keys.get(i)
			res = ka <=> kb
			if (res !== 0) {
				return res
			}
		}
		return 0
	}

    @Pure
	override equals(other : Object) : boolean {
		if (this === other) {
			return true
		}
		if (other === null || getClass() !== other.getClass()) {
			return false
		}
		val otherId = other as KnowledgeID
	    if (!Objects::equal(this.name, otherId.name)) {
	      return false
	    }
		return Arrays::equals(this.keys, otherId.keys)
	}

	@Pure
	override hashCode : int {
		var result = 31 + Objects::hashCode(this.name)
		result = 31 * result + Objects::hashCode(this.keys)
		return result
	}

    /**
     * Compares this identifier with the specified identifier for order.
     * Returns a  integer, zero, or a positive integer as this identifier
     * is less than, equal to, or greater than the specified object.
     *
     * @param other the identifier to be compared.
     * @return a negative integer, zero, or a positive integer as this identifier
     *     is less than, equal to, or greater than the specified identifier.
     */
    @Pure
    @Inline("compareTo($1)")
	def operator_spaceship(other : KnowledgeID) : int {
		compareTo(other)
	}	

}
