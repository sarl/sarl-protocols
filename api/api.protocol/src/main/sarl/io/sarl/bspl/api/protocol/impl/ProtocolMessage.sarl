/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.bspl.api.protocol.impl

import io.sarl.lang.core.Event
import io.sarl.lang.core.EventSpace
import java.io.Serializable
import java.util.UUID
import org.eclipse.xtend.lib.annotations.Accessors

/**
 * Represents the message in the BSPL specification.
 *
 * <p>A BSPL message has a sender (the source of the associated event),
 * a receiver, a message (the associated event).
 * In the SARL implementation, a BSPL message is associated to a specific
 * protocol instance.
 *
 * <p>The {@code ProtocolMessage} is defined. But, it is not designed
 * to be used directly by an agent. The agent behaviors should use
 * the knowledge base and BSPL events.
 *
 * @author $Author: stedeschi$
 * @author $Author: sgalland$
 * @author $Author: mbaldoni$
 * @author $Author: cbaroglio$
 * @author $Author: rmicalizio$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.15
 */
class ProtocolMessage<T extends Event> implements Serializable, Cloneable {

	/** Replies the protocol instance in which the message was emitted.
	 */
	@Accessors
	val ^space : EventSpace

	/** Replies the message content in the form of a SARL event.
	 */
	@Accessors
	val ^event : T

	/** Replies the identifier of the agent which has received the message.
	 */
	@Accessors
	val receiver : UUID

	/** Constructor.
	 *
	 * @param space the space that is supporting the protocol instance.
	 * @param event the data associated to the protocol message.
	 * @param receiver the identifier of the agent which received the protocol message.
	 */
	new(^space : EventSpace, ^event : T, receiver : UUID) {
		this.^space = ^space
		this.^event = ^event
		this.receiver = receiver
	}
	
}
