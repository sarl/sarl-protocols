/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.bspl.api.protocol.enactment

import io.sarl.api.core.Behaviors
import io.sarl.api.core.DefaultContextInteractions
import io.sarl.bspl.api.protocol.impl.ProtocolRole
import io.sarl.bspl.api.protocol.impl.ProtocolSpace
import io.sarl.lang.core.Behavior
import io.sarl.lang.core.SpaceID
import io.sarl.lang.core.SpaceSpecification
import java.util.Map
import java.util.UUID

/**
 * Skill provided to agents for enacting to a BSPL protocol.
 *
 * @author $Author: stedeschi$
 * @author $Author: sgalland$
 * @author $Author: mbaldoni$
 * @author $Author: cbaroglio$
 * @author $Author: rmicalizio$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.15
 */
skill ProtocolEnactmentSkill implements ProtocolEnactment {
	
	uses DefaultContextInteractions, Behaviors
	
	val behaviors : Map<ProtocolRole, Behavior> = newHashMap

	synchronized override enact(protocol : Class<? extends SpaceSpecification<S>>, role : ProtocolRole) with S extends ProtocolSpace {
		defaultContext.createSpace(protocol, UUID::randomUUID).adoptRole(role)
	}

	synchronized override enact(spaceID : SpaceID, role : ProtocolRole) {
		var ^space = defaultContext.getSpace(spaceID.ID) as ProtocolSpace
		if (^space === null) {
			throw new RuntimeException
		}
		^space.adoptRole(role)
	}
	
	private def adoptRole(^space : ProtocolSpace, role : ProtocolRole) {
		if (role.protocolCapacity.hasSkill) {
			role.protocolCapacity.getSkill.addProtocolSpace(^space)
		} else {
			setSkill(role.getProtocolSkill(^space))
		}
		val beh = role.getProtocolBehavior(this.owner)
		if (beh !== null) {
			behaviors.put(role, beh)
			beh.registerBehavior
		}
		role.registerRole(^space, asEventListener)
	}

	synchronized override leave(^space : ProtocolSpace, role : ProtocolRole) : void {
		role.unregisterRole(^space, asEventListener)
		role.getProtocolCapacity.clearSkill
		val beh = behaviors.remove(role)
		if (beh !== null) {
			beh.unregisterBehavior
		}
	}

}
