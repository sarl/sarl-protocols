/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.bspl.api.protocol.impl

import io.sarl.lang.core.SpaceID
import java.util.Map
import java.util.UUID
import java.util.stream.Stream

/**
 * Represents the super type for all the capacities dedicated to specific BSPL protocols.
 *
 * <p>The protocol capacity is unique for a single agent (because of the unicity of skills
 * from the SARL metamodel). Therefore, the protocol capacity could manage multiple
 * protocol instances.
 *
 * <p>This capacity provides protocol-independent functions to the agents.
 * The protocol-specific functions are provided by the sub-capacities.
 *
 * @author $Author: stedeschi$
 * @author $Author: sgalland$
 * @author $Author: mbaldoni$
 * @author $Author: cbaroglio$
 * @author $Author: rmicalizio$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 0.15
 */
capacity ProtocolCapacity {

	/** Associated to the capacity the interaction space that is supporting the protocol instance.
	 *
	 * @param space the protocol instance to be used by the agent.
	 */ 
	def addProtocolSpace(^space : ProtocolSpace)

	/** Replies the participants to protocol instances in which this agent is enacted.
	 *
	 * <p>The returned map provides for each protocol instance, represented by {@code SpaceID}, the identifiers
	 * of all the role players, per role.
	 *
	 * @return the participants to all the protocol instances in which the current agent is enacted. 
	 */ 
	def getProtocolParticipants() : Map<SpaceID, Map<ProtocolRole, Stream<UUID>>>

	/** Replies the participants with a specific role to protocol instances in which this agent is enacted.
	 *
	 * <p>The returned map provides for each protocol instance, represented by {@code SpaceID}, the identifiers
	 * of all the role players.
	 *
	 * @return the participants to all the protocol instances in which the current agent is enacted. 
	 */ 
	def getProtocolParticipants(role : ProtocolRole) : Map<SpaceID, Stream<UUID>>

}
