/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.extensions.bspl.api.protocol.tests.impl

import io.sarl.extensions.bspl.api.protocol.impl.ProtocolMessage
import io.sarl.lang.core.Event
import io.sarl.lang.core.EventSpace
import java.util.UUID
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Test

import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.Mockito.*

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 1.0
 */
@DisplayName("ProtocolMessage")
class ProtocolMessageTest {

	var ^space : EventSpace

	var ^event : Event
	
	var receiver : UUID

	var test : ProtocolMessage<?>

	@BeforeEach
	def setUp : void {
		this.^space = typeof(EventSpace).mock
		this.^event = typeof(Event).mock
		this.receiver = UUID::randomUUID
		this.test = new ProtocolMessage(this.^space, this.^event, this.receiver)
	}
	
	@Test
	@DisplayName("getSpace")
	def getSpace : void {
		var actual = this.test.^space
		actual.assertNotNull
		this.^space.assertSame(actual)
	}

	@Test
	@DisplayName("getEvent")
	def getEvent : void {
		var actual = this.test.^event
		actual.assertNotNull
		this.^event.assertSame(actual)
	}

	@Test
	@DisplayName("getReceiver")
	def getReceiver : void {
		var actual = this.test.receiver
		actual.assertNotNull
		this.receiver.assertSame(actual)
	}

}
