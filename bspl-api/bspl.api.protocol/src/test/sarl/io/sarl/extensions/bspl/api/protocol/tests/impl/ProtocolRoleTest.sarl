/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.extensions.bspl.api.protocol.tests.impl

import io.sarl.extensions.bspl.api.protocol.impl.ProtocolRole
import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSpace
import io.sarl.lang.core.Agent
import io.sarl.lang.core.EventListener
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Test
import org.mockito.ArgumentCaptor

import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.Mockito.*

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 1.0
 */
@DisplayName("ProtocolRole")
class ProtocolRoleTest {

	var test : ProtocolRole

	@BeforeEach
	def setUp : void {
		this.test = new ProtocolRoleMock
	}
	
	@Test
	@DisplayName("getProtocolCapacity")
	def getProtocolCapacity : void {
		this.test.protocolCapacity.assertNull
	}

	@Test
	@DisplayName("getProtocolSkill(null)")
	def getProtocolSkill_null : void {
		this.test.getProtocolSkill(null).assertNull
	}

	@Test
	@DisplayName("getProtocolSkill(x)")
	def getProtocolSkill_x : void {
		var x = typeof(ProtocolSpace).mock
		this.test.getProtocolSkill(x).assertNull
	}

	@Test
	@DisplayName("getProtocolBehavior(null)")
	def getProtocolBehavior_null : void {
		this.test.getProtocolBehavior(null).assertNull
	}

	@Test
	@DisplayName("getProtocolBehavior(x)")
	def getProtocolBehavior_x : void {
		var x = typeof(Agent).mock
		this.test.getProtocolBehavior(x).assertNull
	}

	@Test
	@DisplayName("registerRole(x, null)")
	def registerRole_x_null : void {
		var x = typeof(ProtocolSpace).mock
		this.test.registerRole(x, null)
		var c0 = ArgumentCaptor::forClass(typeof(ProtocolRole))
		var c1 = ArgumentCaptor::forClass(typeof(EventListener))
		x.verify.register(c0.capture, c1.capture)
		this.test.assertSame(c0.value)
		c1.value.assertNull
	}

	@Test
	@DisplayName("registerRole(x, a)")
	def registerRole_x_a : void {
		var x = typeof(ProtocolSpace).mock
		var a = typeof(EventListener).mock
		this.test.registerRole(x, a)
		var c0 = ArgumentCaptor::forClass(typeof(ProtocolRole))
		var c1 = ArgumentCaptor::forClass(typeof(EventListener))
		x.verify.register(c0.capture, c1.capture)
		this.test.assertSame(c0.value)
		a.assertSame(c1.value)
	}

	@Test
	@DisplayName("registerRole(null, null)")
	def registerRole_null_null : void {
		typeof(NullPointerException).assertThrows [
			this.test.registerRole(null, null)
		]
	}

	@Test
	@DisplayName("registerRole(null, a)")
	def registerRole_null_a : void {
		var a = typeof(EventListener).mock
		typeof(NullPointerException).assertThrows [
			this.test.registerRole(null, a)
		]
	}

	@Test
	@DisplayName("unregisterRole(x, null)")
	def unregisterRole_x_null : void {
		var x = typeof(ProtocolSpace).mock
		this.test.unregisterRole(x, null)
		var c0 = ArgumentCaptor::forClass(typeof(ProtocolRole))
		var c1 = ArgumentCaptor::forClass(typeof(EventListener))
		x.verify.unregister(c0.capture, c1.capture)
		this.test.assertSame(c0.value)
		c1.value.assertNull
	}

	@Test
	@DisplayName("unregisterRole(x, a)")
	def unregisterRole_x_a : void {
		var x = typeof(ProtocolSpace).mock
		var a = typeof(EventListener).mock
		this.test.unregisterRole(x, a)
		var c0 = ArgumentCaptor::forClass(typeof(ProtocolRole))
		var c1 = ArgumentCaptor::forClass(typeof(EventListener))
		x.verify.unregister(c0.capture, c1.capture)
		this.test.assertSame(c0.value)
		a.assertSame(c1.value)
	}

	@Test
	@DisplayName("unregisterRole(null, null)")
	def unregisterRole_null_null : void {
		typeof(NullPointerException).assertThrows [
			this.test.unregisterRole(null, null)
		]
	}

	@Test
	@DisplayName("unregisterRole(null, a)")
	def unregisterRole_null_a : void {
		var a = typeof(EventListener).mock
		typeof(NullPointerException).assertThrows [
			this.test.unregisterRole(null, a)
		]
	}

	@Test
	@DisplayName("getMinCardinality")
	def getMinCardinality : void {
		1.assertEquals(this.test.minCardinality)
	}

	@Test
	@DisplayName("getMaxCardinality")
	def getMaxCardinality : void {
		Integer::MAX_VALUE.assertEquals(this.test.maxCardinality)
	}

	private static class ProtocolRoleMock implements ProtocolRole {

		override name : String {
			"THE-ROLE"
		}

	}

}
