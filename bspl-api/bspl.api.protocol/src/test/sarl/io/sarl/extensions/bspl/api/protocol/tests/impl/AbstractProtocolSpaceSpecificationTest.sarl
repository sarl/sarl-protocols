/*
 * $Id$
 *
 * SARL is an general-purpose agent programming language.
 * More details on http://www.sarl.io
 *
 * Copyright (C) 2014-2025 SARL.io, the Original Authors and Main Authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package io.sarl.extensions.bspl.api.protocol.tests.impl

import io.sarl.api.core.spaces.SpaceParticipantListener
import io.sarl.api.core.spaces.SpaceParticipantListenerFactory
import io.sarl.extensions.bspl.api.protocol.impl.AbstractProtocolSpaceSpecification
import io.sarl.extensions.bspl.api.protocol.impl.ProtocolSpace
import io.sarl.lang.core.SpaceID
import io.sarl.lang.core.SpaceSpecification
import java.util.UUID
import org.junit.jupiter.api.BeforeEach
import org.junit.jupiter.api.DisplayName
import org.junit.jupiter.api.Test

import static io.sarl.lang.core.SRE.*
import static org.mockito.ArgumentMatchers.*

import static extension org.junit.jupiter.api.Assertions.*
import static extension org.mockito.Mockito.*
import io.sarl.extensions.bspl.api.protocol.impl.ProtocolRole
import io.sarl.lang.core.SREBootstrap

/**
 * @author $Author: sgalland$
 * @version $FullVersion$
 * @mavengroupid $GroupId$
 * @mavenartifactid $ArtifactId$
 * @since 1.0
 */
@DisplayName("AbstractProtocolSpaceSpecification")
class AbstractProtocolSpaceSpecificationTest {

	var test : AbstractProtocolSpaceSpecification

	@BeforeEach
	def setUp : void {
		bootstrap = typeof(SREBootstrap).mock
		this.test = new AbstractProtocolSpaceSpecificationMock(null, null)
	}
	
	@SuppressWarnings("raw_type")
	private def mockSpaceSpecification : Class<? extends SpaceSpecification<ProtocolSpace>> {
		(typeof(SpaceSpecification) as Object) as Class
	}

	@Test
	@DisplayName("create(ID)")
	def create_id : void {
		var spec = mockSpaceSpecification
		var id = new SpaceID(UUID::randomUUID, UUID::randomUUID, spec)

		var factory = typeof(SpaceParticipantListenerFactory).mock
		this.test.spaceParticipantListenerFactory = factory
		var participant = typeof(SpaceParticipantListener).mock
		factory.create(any, any).when.thenReturn(participant)
		
		var actual = this.test.create(id)

		actual.assertNotNull
		id.assertSame(actual.spaceID)
	}

	private static class AbstractProtocolSpaceSpecificationMock extends AbstractProtocolSpaceSpecification {

		def getRoles : ProtocolRole[] {
			#[]
		}

		def getProtocolName : String {
			"testing-protocol"
		}

	}

}
